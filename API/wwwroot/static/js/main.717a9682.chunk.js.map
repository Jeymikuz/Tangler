{"version":3,"sources":["app/api/agent.ts","app/stores/ordersStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/models/integration.ts","features/dashboard/documents/invoices/InvoicesList.tsx","features/dashboard/documents/Documents.tsx","features/dashboard/HomeDashboardPage.tsx","features/dashboard/integrations/IntegrationAccordionElement.tsx","app/common/form/FSelectInput.tsx","app/common/form/FTextInput.tsx","features/dashboard/integrations/NewIntegrationForm.tsx","features/dashboard/integrations/NewIntegrationModal.tsx","features/dashboard/integrations/Integrations.tsx","features/dashboard/orderDetails/edit/OrderInfoDetailsEditForm.tsx","features/dashboard/orderDetails/OrderInfoDetails.tsx","features/dashboard/orderDetails/edit/OrderInfoDeliveryEditForm.tsx","features/dashboard/orderDetails/OrderInfoDelivery.tsx","features/dashboard/orderDetails/edit/OrderInfoInvoiceEditForm.tsx","features/dashboard/orderDetails/OrderInfoInvoice.tsx","features/dashboard/orderDetails/edit/OrderInfoPickupPointEditForm.tsx","features/dashboard/orderDetails/OrderInfoPickupPoint.tsx","features/dashboard/orderDetails/OrderInfo.tsx","features/dashboard/orderDetails/edit/OrderProductRowEdit.tsx","features/dashboard/orderDetails/OrderProductRow.tsx","features/dashboard/orderDetails/OrderProducts.tsx","features/dashboard/orderDetails/OrderDetails.tsx","features/dashboard/orders/AddOrderForm.tsx","features/dashboard/orders/AddOrderModal.tsx","features/dashboard/statuses/StatusSidebar.tsx","app/common/form/FColorPickerInput.tsx","features/dashboard/statuses/StatusCreateForm.tsx","features/dashboard/statuses/StatusEditForm.tsx","features/dashboard/statuses/StatusModal.tsx","features/dashboard/orders/OrderListPlaceholder.tsx","features/dashboard/orders/OrdersList.tsx","features/dashboard/orders/Orders.tsx","features/dashboard/settings/SettingsInfoForm.tsx","features/dashboard/settings/SettingsInfo.tsx","features/dashboard/settings/Settings.tsx","features/dashboard/settings/usersSettings/UserSettingsAccordionElement.tsx","features/dashboard/settings/usersSettings/NewUserForm.tsx","features/dashboard/settings/usersSettings/UserSettingsModal.tsx","features/dashboard/settings/usersSettings/UserSettings.tsx","features/dashboard/statuses/StatusGroupCreateForm.tsx","features/dashboard/statuses/StatusGroupEditForm.tsx","features/dashboard/statuses/StatusGroupModal.tsx","features/dashboard/statuses/StatusesAccordionElement.tsx","features/dashboard/statuses/Statuses.tsx","features/home/HomePage.tsx","app/common/Colors.ts","features/user/UserLogin.tsx","features/user/UserRegistration.tsx","app/layout/DashboardNavbar.tsx","app/layout/DashboardSidebar.tsx","app/layout/HomeNavBar.tsx","app/layout/LoaderComponent.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","index.tsx"],"names":["axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","error","console","log","Promise","reject","status","toast","responseBody","data","url","get","then","body","post","put","delete","agent","Account","current","login","user","getUserList","deleteUser","userName","createUser","newUser","Orders","list","params","details","id","add","order","edit","updateStatus","orderId","statusId","Statuses","create","createObject","editIndexes","groupId","status1","status2","StatusesGroups","name","Integrations","newIntegration","Invoices","method","responseType","window","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","appendChild","click","Company","company","OrdersStore","orderRegistry","Map","statuses","undefined","statusGroups","selectedStatus","selectedOrder","integrations","loading","statusEditModal","addOrderModal","editCompanyInfo","getInvoicesList","createInvoice","getInvoice","createIntegration","deleteIntegrations","loadIntegrations","updateOrderStatus","runInAction","toString","updateStatusesIndexes","editGroupStatus","statusGroup","editedGroup","index","findIndex","x","createGroupsStatus","newGroup","push","createStatus","loadStatuses","deleteStatusGroup","header","updateStatusOrder","indexStart","indexEnd","items","Array","from","find","splice","reorderedItems","temp","map","s","reset","clear","addNewProductToOrder","newProduct","externalId","warehouseId","description","ean","sku","img","price","quantity","weight","products","result","set","editProductOrder","product","editOrder","addOrder","setLoading","history","setAddOrderModal","isOpen","deleteStatus","statusGroupId","indexOfStatusGroup","indexOf","statusToRemove","indexOfStatus","slice","editStatus","editedStatus","statusToEdit","setStatusId","setEditStatusModal","loadOrders","URLSearchParams","append","forEach","isLoading","setOrder","getOrder","loadOrderStatus","loadOrder","parseInt","cleareSelectedOrder","makeAutoObservable","this","reaction","values","UserStore","loadUsers","logout","setToken","localStorage","removeItem","creds","getCurrentUser","getItem","appLoaded","setServerError","setAppLoaded","setItem","userStore","ordersStore","StoreContext","createContext","useStore","useContext","IntegrationType","observer","useState","invoices","setInvoices","useEffect","GetList","Segment","padded","piled","raised","List","divided","relaxed","invoice","Item","Icon","Content","Header","address","street","zipCode","city","nip","Button","icon","circular","style","margin","padding","marginLeft","onClick","floated","color","Description","firstName","lastName","panes","menuItem","render","Tab","integration","active","setActive","showConfirm","setShowConfirm","Accordion","Title","Label","type","privateName","siteUrl","connectionProblem","Confirm","open","content","onCancel","onConfirm","FSelectInput","props","useField","field","meta","helpers","Form","Field","touched","label","hidden","Select","options","placeholder","defaultValue","onChange","event","value","setValue","FTextInput","basic","setOpen","groupsOptions","key","text","client_key","private_key","Woocommerce","initialValues","onSubmit","setErrors","catch","errors","handleSubmit","isSubmitting","className","autoComplete","marginBottom","as","textAlign","component","Modal","closeIcon","size","onClose","onOpen","trigger","Container","Divider","styled","exclusie","fluid","changeEditMode","height","fontSize","verticalAlign","editMode","setEditMode","isEdited","clientLogin","email","phoneNumber","deliveryPrice","paymentMethod","deliveryMethod","clientMessage","descriptionStyle","Group","widths","deliveryAddress","erros","isCreated","pickUpPoint","pointId","Grid","Row","columns","Column","marginRight","editedProduct","setEditedProduct","Table","Cell","width","Input","disabled","singleLine","evt","target","min","step","labelPosition","isEditMode","Dropdown","Menu","celled","HeaderCell","sub","Body","OrderProductRow","useParams","showEditStatus","setShowEditStatus","countryOptions","setStatus","founderOrder","loadOrderAndStatus","goBack","marginTop","inline","selection","e","findedStatus","tag","backgroundColor","Subheader","orderedAt","validationSchema","Yup","required","test","statusOptions","positive","accStatuses","sort","groups","title","vertical","compact","exclusive","defaultActiveIndex","panels","FColorPickerInput","handleChange","initialVal","moreThan","shape","isNew","OrderListPlaceholder","i","Placeholder","Line","striped","listOfOrders","collapsing","to","paddingRight","setCompany","GetCompany","setSubmitting","maxWidth","minHeight","displayName","password","matches","users","setUsers","dtoUsers","UserSettingsModal","openDeleteConfirm","setOpenDeleteConfirm","cancelButton","group","sortedStatusesByIndex","b","background","onDragEnd","source","destination","droppableId","droppableProps","innerRef","listStyleType","ref","draggableId","draggableProps","dragHandleProps","sortedGroupsByIndex","Image","src","paddingTop","Colors","username","fixed","inverted","borderRadius","position","direction","NavLink","simple","item","Dimmer","Loader","PrivateRoute","Component","rest","isLoggedIn","finally","hideProgressBar","exact","path","HomePage","UserLogin","UserRegistration","HomeDashboardPage","OrderDetails","UserSettings","Documents","Settings","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","createBrowserHistory","ReactDOM","StrictMode","Provider","getElementById"],"mappings":"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","file":"static/js/main.717a9682.chunk.js","sourcesContent":["import axios, { AxiosError, AxiosResponse } from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { Company } from '../models/company';\r\nimport { Integration, NewIntegration } from '../models/integration';\r\nimport { Invoice } from '../models/invoice';\r\nimport { NewOrder, Order } from '../models/order';\r\nimport { Status } from '../models/status';\r\nimport { StatusGroup } from '../models/statusGroup';\r\nimport { NewUser, User, UserLoginFormValues, UserSettings } from '../models/user';\r\nimport { store } from '../stores/store';\r\n\r\nconst sleep = (delay: number) =>{\r\n    return new Promise((reslove) => {\r\n        setTimeout(reslove,delay);\r\n    })\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if(token) config.headers.Authorization = `Bearer ${token}`;\r\n    return config;\r\n})\r\n\r\naxios.interceptors.response.use(async response =>{\r\n   if(process.env.NODE_ENV ==='development') await sleep(500);\r\n\r\n    return response;\r\n},(error: AxiosError) =>{\r\n    if(!error.response){\r\n        console.log(\"Connection error\");\r\n        return Promise.reject(error);\r\n    }\r\n    const {status} = error.response!;\r\n\r\n    switch(status){\r\n        case 400:\r\n            break;\r\n        case 401:\r\n            console.log('unauthorise');\r\n            toast.error('Problem z autoryzacją');\r\n            break;\r\n        case 404:\r\n            console.log('not found');\r\n            break;\r\n        case 500:\r\n            console.log('server error');\r\n            break;        \r\n    }\r\n    return Promise.reject(error);\r\n});\r\n\r\nconst responseBody = <T> (response: AxiosResponse<T>) => response.data;\r\n\r\nconst request = {\r\n    get: <T> (url:string) => axios.get<T>(url).then(responseBody),\r\n    post: <T> (url: string, body: {}) => axios.post<T>(url,body).then(responseBody),\r\n    put: <T> (url: string, body: {}) => axios.put<T>(url,body).then(responseBody),\r\n    del: <T> (url: string) => axios.delete<T>(url).then(responseBody),\r\n}\r\n\r\nconst Companies = {\r\n    get: () => request.get<Company>('/company'),\r\n    edit: (company: Company) => request.put('/company',company),\r\n}\r\n\r\nconst Invoices = {\r\n    get: (orderId: string) => axios({\r\n        url: `/invoices/${orderId}`,\r\n        method: 'GET',\r\n        responseType: 'blob', // important\r\n      }).then((response) => {\r\n        const url = window.URL.createObjectURL(new Blob([response.data]));\r\n        const link = document.createElement('a');\r\n        link.href = url;\r\n        link.setAttribute('download', 'Faktura.pdf');\r\n        document.body.appendChild(link);\r\n        link.click();\r\n      }),\r\n      create: (orderId: string) => request.post(`/invoices/${orderId}`,{}),\r\n      list: () => request.get<Invoice[]>('/invoices'),\r\n}\r\n\r\nconst Account ={\r\n    current: () => request.get<User>('/account'),\r\n    login: (user: UserLoginFormValues) => request.post<User>('/account/login',user),\r\n    getUserList:()=> request.get<UserSettings[]>('/account/getCompanyUsers'),\r\n    deleteUser:(userName: string) => request.del(`/account/deleteWorker/${userName}`),\r\n    createUser:(newUser: NewUser) => request.post('/account/addWorker',newUser),\r\n}\r\n\r\nconst Orders = {\r\n    list: (params: URLSearchParams) => axios.get<Order[]>('/orders',{params: params}).then(responseBody),\r\n    details: (id: number) => request.get<Order>(`/orders/${id}`),\r\n    add:(order: NewOrder) => request.post<Order>('/orders',order),\r\n    edit:(order: Order) => request.put<Order>('/orders',order),\r\n    updateStatus:(orderId: number, statusId: number) => request.post('/orders/updateStatus',{orderId: orderId, statusId: statusId}),\r\n}\r\n\r\nconst Statuses = {\r\n    list: () => request.get<StatusGroup[]>('/statuses'),\r\n    edit: (status: Status) => request.put<Status>('/statuses',status),\r\n    delete: (statusId: number) => request.del(`/statuses/${statusId}`),\r\n    create: (createObject: {groupId:number , status: Status}) => request.post('/statuses',createObject),\r\n    editIndexes: (groupId: number, status1: {id: number, index: number}, status2: {id: number, index: number}) => request.put('/statuses/indexes', {groupId,status1, status2}),\r\n}\r\n\r\nconst StatusesGroups ={\r\n    create: (name: string) => request.post<StatusGroup>('/statusesgroups',{name: name}),\r\n    edit: (id: number, name: string) => request.put<StatusGroup>('/statusesgroups',{id: id, name: name}),\r\n    delete: (groupId:number) => request.del(`/statusesgroups/${groupId}`),\r\n}\r\n\r\nconst Integrations={\r\n    list: ()=> request.get<Integration[]>('/integrations'),\r\n    delete: (id: string) => request.del(`/integrations/${id}`),\r\n    create: (newIntegration: NewIntegration) => request.post('/integrations',newIntegration),\r\n}\r\n\r\nconst agent = {\r\n    Account,\r\n    Orders,\r\n    Statuses,\r\n    StatusesGroups,\r\n    Integrations,\r\n    Invoices,\r\n    Company: Companies\r\n}\r\n\r\nexport default agent;","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { Company } from \"../models/company\";\r\nimport { Integration, NewIntegration } from \"../models/integration\";\r\nimport { NewOrder, Order } from \"../models/order\";\r\nimport { OrderProduct } from \"../models/orderProduct\";\r\nimport { Status } from \"../models/status\";\r\nimport { StatusGroup } from \"../models/statusGroup\";\r\n\r\nexport default class OrdersStore {\r\n  orderRegistry = new Map<number, Order>();\r\n  statuses: Status[] | undefined = undefined;\r\n  statusGroups: StatusGroup[] | undefined = undefined;\r\n  selectedStatus: Status | undefined = undefined;\r\n  selectedOrder: Order | undefined = undefined;\r\n  integrations: Integration[] | undefined = undefined;\r\n  loading = false;\r\n  statusId = 0;\r\n  statusEditModal = false;\r\n  addOrderModal = false;\r\n\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n\r\n    reaction(\r\n      () => this.statusId,\r\n      () => {\r\n        this.loadOrders();\r\n      }\r\n    );\r\n  }\r\n\r\n  editCompanyInfo = async (company: Company) =>{\r\n    try{\r\n      await agent.Company.edit(company);\r\n    }catch(error){\r\n      \r\n    }\r\n  }\r\n\r\n  getInvoicesList = async () => {\r\n    try {\r\n      return await agent.Invoices.list();\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  createInvoice = async (orderId: string) => {\r\n    try {\r\n      await agent.Invoices.create(orderId);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  getInvoice = async (orderId: string) => {\r\n    try {\r\n      await agent.Invoices.get(orderId);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  createIntegration = async (newIntegration: NewIntegration) => {\r\n    try {\r\n      await agent.Integrations.create(newIntegration);\r\n    } catch (error) {}\r\n  };\r\n\r\n  deleteIntegrations = async (id: string) => {\r\n    try {\r\n      await agent.Integrations.delete(id);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  loadIntegrations = async () => {\r\n    try {\r\n      this.integrations = await agent.Integrations.list();\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  updateOrderStatus = async (orderId: number, statusId: number) => {\r\n    try {\r\n      await agent.Orders.updateStatus(orderId, statusId);\r\n      runInAction(() => {\r\n        this.selectedOrder!.statusId = statusId.toString();\r\n      });\r\n    } catch (error) {}\r\n  };\r\n\r\n  updateStatusesIndexes = async (\r\n    groupId: number,\r\n    status1: { id: number; index: number },\r\n    status2: { id: number; index: number }\r\n  ) => {\r\n    try {\r\n      console.log(\"Updatowanie statusów\");\r\n      await agent.Statuses.editIndexes(groupId, status1, status2);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  editGroupStatus = async (statusGroup: StatusGroup) => {\r\n    try {\r\n      var editedGroup = await agent.StatusesGroups.edit(\r\n        statusGroup.id,\r\n        statusGroup.name\r\n      );\r\n      var index = this.statusGroups?.findIndex((x) => x.id === statusGroup.id);\r\n      runInAction(() => {\r\n        console.log(this.statusGroups);\r\n        console.log(\"LELELE\");\r\n        console.log(\"index \" + index);\r\n        console.log(editedGroup);\r\n        this.statusGroups![index!] = editedGroup;\r\n        console.log(this.statusGroups);\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  createGroupsStatus = async (name: string) => {\r\n    try {\r\n      console.log(name);\r\n      var newGroup = await agent.StatusesGroups.create(name);\r\n\r\n      runInAction(() => {\r\n        this.statusGroups?.push(newGroup);\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  createStatus = async (groupId: number, status: Status) => {\r\n    try {\r\n      await agent.Statuses.create({ groupId: groupId, status: status });\r\n      await this.loadStatuses();\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  deleteStatusGroup = async (groupId: number) => {\r\n    try {\r\n      console.log(`Usuwam grupe ${groupId}`);\r\n      await agent.StatusesGroups.delete(groupId);\r\n      await this.loadStatuses();\r\n    } catch (error: any) {\r\n      if (error.response) {\r\n        console.log(error.response.data);\r\n        console.log(error.response.status);\r\n        console.log(error.response.header);\r\n      }\r\n    }\r\n  };\r\n\r\n  updateStatusOrder = (id: number, indexStart: number, indexEnd: number) => {\r\n    if (indexStart !== indexEnd) {\r\n      const items = Array.from(\r\n        this.statusGroups?.find((x) => x.id === id)?.statuses!\r\n      );\r\n      const [reorderedItems] = items.splice(indexStart, 1);\r\n      items.splice(indexEnd, 0, reorderedItems);\r\n\r\n      const status1 = this.statusGroups\r\n        ?.find((x) => x.id === id)\r\n        ?.statuses?.find((x) => x.index === indexStart);\r\n      const status2 = this.statusGroups\r\n        ?.find((x) => x.id === id)\r\n        ?.statuses?.find((x) => x.index === indexEnd);\r\n\r\n      this.updateStatusesIndexes(\r\n        id,\r\n        { id: status1?.id!, index: status2?.index! },\r\n        { id: status2?.id!, index: status1?.index! }\r\n      );\r\n\r\n      runInAction(() => {\r\n        //  this.statusGroups!.find(x=>x.id === id)!.statuses!.find(x=>x.index === indexStart)!.index = indexEnd\r\n        //  this.statusGroups!.find(x=>x.id === id)!.statuses!.find(x=>x.index === indexEnd)!.index = indexStart;\r\n        var temp = 0;\r\n        items.map((s) => (s.index = temp++));\r\n        this.statusGroups!.find((x) => x.id === id)!.statuses = items;\r\n      });\r\n    }\r\n  };\r\n\r\n  reset = () => {\r\n    runInAction(() => {\r\n      this.statuses = undefined;\r\n      this.orderRegistry.clear();\r\n      this.selectedStatus = undefined;\r\n      this.selectedOrder = undefined;\r\n      this.loading = false;\r\n      this.statusId = 0;\r\n      this.statusEditModal = false;\r\n      this.addOrderModal = false;\r\n    });\r\n  };\r\n\r\n  addNewProductToOrder = async () => {\r\n    const newProduct: OrderProduct = {\r\n      id: 0,\r\n      externalId: 0,\r\n      warehouseId: 0,\r\n      description: \"\",\r\n      ean: \"\",\r\n      sku: \"\",\r\n      img: \"\",\r\n      name: \"\",\r\n      price: 0,\r\n      quantity: \"\",\r\n      weight: 0,\r\n    };\r\n\r\n    try {\r\n      runInAction(() => {\r\n        this.selectedOrder?.products?.push(newProduct);\r\n      });\r\n\r\n      const result = await agent.Orders.edit(this.selectedOrder!);\r\n      runInAction(() => {\r\n        this.orderRegistry.set(result.id, result);\r\n        this.selectedOrder = result;\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  editProductOrder = async (product: OrderProduct) => {\r\n    try {\r\n      var index = this.selectedOrder?.products?.findIndex(\r\n        (x) => x.id === product.id\r\n      );\r\n      this.selectedOrder!.products![index!] = product;\r\n      const result = await agent.Orders.edit(this.selectedOrder!);\r\n      runInAction(() => {\r\n        this.orderRegistry.set(result.id, result);\r\n        this.selectedOrder = result;\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  editOrder = async (order: Order) => {\r\n    try {\r\n      const result = await agent.Orders.edit(order);\r\n      runInAction(() => {\r\n        this.orderRegistry.set(result.id, result);\r\n        this.selectedOrder = result;\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  addOrder = async (order: NewOrder) => {\r\n    try {\r\n      this.setLoading(true);\r\n      console.log(order);\r\n      console.log('es');\r\n      const result = await agent.Orders.add(order);\r\n      runInAction(() => {\r\n        this.orderRegistry.set(result.id, result);\r\n        this.selectedOrder = result;\r\n        history.push(`/dashboard/zamowienia/${result.id}`);\r\n        this.setLoading(false);\r\n      });\r\n    } catch (error) {\r\n      this.setLoading(false);\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  setAddOrderModal = (isOpen: boolean) => {\r\n    this.addOrderModal = isOpen;\r\n  };\r\n\r\n  deleteStatus = async (statusId: number) => {\r\n    try {\r\n      await agent.Statuses.delete(statusId).then(() => {\r\n        runInAction(() => {\r\n          var statusGroupId = this.statusGroups!.find((x) =>\r\n            x.statuses!.find((x) => x.index! === statusId!)\r\n          );\r\n          var indexOfStatusGroup = this.statusGroups!.indexOf(statusGroupId!);\r\n          var statusToRemove = this.statusGroups![\r\n            indexOfStatusGroup\r\n          ].statuses?.find((x) => x.id === statusId);\r\n          var indexOfStatus = this.statusGroups![\r\n            indexOfStatusGroup\r\n          ].statuses?.indexOf(statusToRemove!);\r\n          this.statusGroups![indexOfStatusGroup].statuses!.slice(\r\n            indexOfStatus,\r\n            1\r\n          );\r\n        });\r\n      });\r\n\r\n      await this.loadStatuses();\r\n    } catch (errors) {\r\n      console.log(errors);\r\n    }\r\n  };\r\n\r\n  editStatus = async (status: Status) => {\r\n    this.setLoading(true);\r\n    try {\r\n      let editedStatus = await agent.Statuses.edit(status);\r\n      console.log(editedStatus);\r\n      if (this.statusGroups) {\r\n        runInAction(() => {\r\n          if (this.statusGroups) {\r\n            var statusGroupId = this.statusGroups!.find((x) =>\r\n              x.statuses!.find((x) => x.index! === editedStatus.id!)\r\n            );\r\n            var indexOfStatusGroup = this.statusGroups.indexOf(statusGroupId!);\r\n            var statusToEdit = this.statusGroups[\r\n              indexOfStatusGroup\r\n            ].statuses?.find((x) => x.id === editedStatus.id);\r\n            var indexOfStatus = this.statusGroups[\r\n              indexOfStatusGroup\r\n            ].statuses?.indexOf(statusToEdit!);\r\n\r\n            this.statusGroups[indexOfStatusGroup].statuses![indexOfStatus!] =\r\n              editedStatus;\r\n            var index = this.statuses?.indexOf(this.selectedStatus!);\r\n            this.statuses![index!] = editedStatus;\r\n            this.setStatusId(editedStatus.id);\r\n            this.selectedStatus = editedStatus;\r\n          }\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  setEditStatusModal = (isOpen: boolean) => {\r\n    this.statusEditModal = isOpen;\r\n  };\r\n\r\n  loadOrders = async () => {\r\n    runInAction(() => {\r\n      this.setLoading(true);\r\n      this.orderRegistry.clear();\r\n    });\r\n    try {\r\n      const params = new URLSearchParams();\r\n      params.append(\"statusid\", this.statusId.toString());\r\n\r\n      const result = await agent.Orders.list(params);\r\n      runInAction(() => {\r\n        result.forEach((order: Order) => {\r\n          this.orderRegistry.set(order.id, order);\r\n        });\r\n        this.setLoading(false);\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n      this.setLoading(false);\r\n    }\r\n  };\r\n\r\n  setStatusId = (id: number) => {\r\n    runInAction(() => {\r\n      this.statusId = id;\r\n      this.selectedStatus = this.statuses?.find((x) => x.id === id);\r\n    });\r\n  };\r\n\r\n  setLoading = (isLoading: boolean) => {\r\n    this.loading = isLoading;\r\n  };\r\n\r\n  get listOfOrders() {\r\n    return Array.from(this.orderRegistry.values());\r\n  }\r\n\r\n  setOrder = (order: Order) => {\r\n    this.selectedOrder = order;\r\n  };\r\n\r\n  private getOrder = (id: number) => {\r\n    return this.orderRegistry.get(id);\r\n  };\r\n\r\n  loadOrderStatus = (statusId: number) => {\r\n    const findedStatus = this.statuses?.find((x) => x.id === statusId);\r\n    return findedStatus;\r\n  };\r\n\r\n  loadOrder = async (id: number) => {\r\n    this.setLoading(true);\r\n    let order = this.getOrder(id);\r\n    try {\r\n      if (order) {\r\n        this.setOrder(order);\r\n        //     this.setStatusId(parseInt(order.statusId!));\r\n        this.setLoading(false);\r\n\r\n        return order;\r\n      } else {\r\n        order = await agent.Orders.details(id);\r\n        this.setOrder(order!);\r\n        if (!this.statuses) await this.loadStatuses();\r\n        this.setStatusId(parseInt(order!.statusId!));\r\n        this.setLoading(false);\r\n        return order;\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      this.setLoading(false);\r\n    }\r\n  };\r\n\r\n  cleareSelectedOrder = () => {\r\n    this.selectedOrder = undefined;\r\n  };\r\n\r\n  loadStatuses = async () => {\r\n    try {\r\n      this.setLoading(true);\r\n\r\n      const statusGroups = await agent.Statuses.list();\r\n      runInAction(() => {\r\n        this.statusGroups = statusGroups;\r\n        this.statuses = [];\r\n        // eslint-disable-next-line array-callback-return\r\n        this.statusGroups!.map((x) =>\r\n          x.statuses?.map((status) => {\r\n            this.statuses?.push(status);\r\n          })\r\n        );\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n      this.setLoading(false);\r\n    }\r\n  };\r\n}\r\n","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { NewUser, User, UserLoginFormValues } from \"../models/user\";\r\nimport { store } from \"./store\";\r\n\r\n\r\nexport default class UserStore{\r\n    \r\n    user: User | null =  null;\r\n    \r\n    constructor(){\r\n        makeAutoObservable(this);\r\n    }\r\n    \r\n    get isLoggedIn(){\r\n        return !!this.user;\r\n    }\r\n\r\n    loadUsers = async() =>{\r\n        try{\r\n            return await agent.Account.getUserList();\r\n        }catch(error){\r\n            console.log(error);\r\n        }\r\n    }\r\n    \r\n    createUser = async(newUser: NewUser) => {\r\n        try{\r\n            await agent.Account.createUser(newUser);\r\n        }catch(error){\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deleteUser =  async (userName: string) =>{\r\n        try{\r\n            await agent.Account.deleteUser(userName);\r\n        }catch(error){\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    logout = () =>{\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push('/');\r\n    }\r\n\r\n    login = async(creds: UserLoginFormValues) =>{\r\n        try{\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(()=>{\r\n                this.user = user;\r\n            })\r\n            history.push('/dashboard');\r\n        } catch(error){\r\n           throw error;\r\n        }\r\n    }\r\n\r\n    getCurrentUser = async() =>{\r\n        try{\r\n            const user = await agent.Account.current();\r\n            runInAction(()=>{\r\n                this.user = user;\r\n            })\r\n        } catch(error){\r\n            throw error;\r\n        }\r\n    }\r\n}\r\nfunction parseJwt (token: any) {\r\n    var base64Url = token.split('.')[1];\r\n    var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n    var jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {\r\n        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\r\n    }).join(''));\r\n\r\n    return JSON.parse(jsonPayload);\r\n};","import {createContext,useContext} from 'react';\r\nimport CommonStore from './commonStore';\r\nimport OrdersStore from './ordersStore';\r\nimport UserStore from './userStore';\r\n\r\ninterface Store{\r\ncommonStore: CommonStore,\r\nuserStore: UserStore,\r\nordersStore: OrdersStore,\r\n}\r\n\r\nexport const store: Store = {\r\ncommonStore: new CommonStore(),\r\nuserStore: new UserStore(),\r\nordersStore: new OrdersStore()\r\n}\r\n\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore(){\r\n    return useContext(StoreContext);\r\n}","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../models/serverErros\";\r\n\r\nexport default class CommonStore{\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if(token){\r\n                    window.localStorage.setItem('jwt',token);\r\n                } else {\r\n                    window.localStorage.removeItem('jwt');\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token: string | null) => {\r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded=true;\r\n    }\r\n}","export interface Integration{\r\n    id: string,\r\n    type: IntegrationType,\r\n    siteUrl: string,\r\n    privateName: string,\r\n    connectionProblem: boolean,\r\n}\r\n\r\nexport interface NewIntegration{\r\n    type: IntegrationType,\r\n    siteUrl: string,\r\n    privateName: string,\r\n    client_key: string,\r\n    private_key: string\r\n}\r\n\r\nexport enum IntegrationType{\r\n    Woocommerce = 0,\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Button, List, Segment } from \"semantic-ui-react\";\r\nimport { Invoice } from \"../../../../app/models/invoice\";\r\nimport { useStore } from \"../../../../app/stores/store\";\r\n\r\nexport default observer(function InvoicesList() {\r\n  const { ordersStore } = useStore();\r\n  const [invoices, setInvoices] = useState<Invoice[]>([]);\r\n\r\n  useEffect(() => {\r\n    async function GetList() {\r\n      const temp = await ordersStore.getInvoicesList();\r\n      if (temp) {\r\n        setInvoices(temp);\r\n      }\r\n    }\r\n\r\n    GetList();\r\n  }, [ordersStore]);\r\n\r\n  return (\r\n    <Segment padded piled raised>\r\n      <List divided relaxed>\r\n        {invoices &&\r\n          invoices.map((invoice) => (\r\n            <List.Item>\r\n              <List.Icon name=\"copy outline\" />\r\n              <List.Content>\r\n                <List.Header>\r\n                  Faktura: {invoice.address.street} {invoice.address.zipCode} {invoice.address.city} | {invoice.nip}\r\n                  <Button\r\n                    icon=\"arrow alternate circle down outline\"\r\n                    circular\r\n                    style={{ margin: 0, padding: 2, marginLeft: 5 }}\r\n                    onClick={()=>{\r\n                    ordersStore.getInvoice(invoice.id);  \r\n                    }}\r\n                  />\r\n                  <Button \r\n                  icon='remove'\r\n                  floated='right'\r\n                  color='red'\r\n                  />\r\n                </List.Header>\r\n                <List.Description>{invoice.firstName} {invoice.lastName}</List.Description>\r\n              </List.Content>\r\n              \r\n            </List.Item>\r\n          ))}\r\n      </List>\r\n    </Segment>\r\n  );\r\n});\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Tab } from \"semantic-ui-react\";\r\nimport InvoicesList from \"./invoices/InvoicesList\";\r\n\r\nexport default observer(function Document(){\r\n    \r\n    const panes = [\r\n        {menuItem: 'Faktury', render: () => <InvoicesList /> },\r\n        //{menuItem: 'Paragony', render: () => <></> },\r\n    ]\r\n\r\n    return(\r\n        <Tab panes={panes} />\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\n\r\nexport default observer(function HomeDashboardPage() {\r\n    return (\r\n        <>\r\n            Home Dashboard\r\n        </>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { useState } from \"react\";\r\nimport { Accordion, Button, Confirm, Label } from \"semantic-ui-react\";\r\nimport { Integration, IntegrationType } from \"../../../app/models/integration\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\n\r\ninterface Props{\r\n  integration: Integration;\r\n}\r\n\r\nexport default observer(function IntegrationAccordionElement({integration}:Props) {\r\n\r\n  const {ordersStore} = useStore();\r\n  const [active, setActive] = useState(false);\r\n  const [showConfirm,setShowConfirm] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <Accordion.Title\r\n        active={active}\r\n        index={1}\r\n        onClick={() => setActive(!active)}\r\n        \r\n      >\r\n        <Label>{IntegrationType[integration.type]}</Label>| {integration.privateName} | {integration.siteUrl} | Połączenie {integration.connectionProblem ? (\r\n          <Label color='red' circular /> ): ( <Label color='green' circular />\r\n        )}\r\n      </Accordion.Title>\r\n      <Accordion.Content active={active} index={1}>\r\n        <Button \r\n        color='red'\r\n        onClick={() => setShowConfirm(true)}>Usuń integracje</Button>\r\n        <Confirm \r\n        open={showConfirm}\r\n        content='Czy chcesz usunąć?'\r\n        onCancel={() => setShowConfirm(false)}\r\n        onConfirm={\r\n          ()=> ordersStore.deleteIntegrations(integration.id).then(()=> {\r\n            setShowConfirm(false);\r\n            ordersStore.loadIntegrations();\r\n          })\r\n        }\r\n        />\r\n      </Accordion.Content>\r\n    </>\r\n  );\r\n});\r\n","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { DropdownItemProps, Form, Select } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    name: string,\r\n    label?: string,\r\n    type?: string,\r\n    options: DropdownItemProps[],\r\n    placeholder?: string,\r\n    defaultValue?: string | number,\r\n}\r\n\r\nexport default function FSelectInput(props: Props) {\r\n    const [field, meta, helpers] = useField(props.name);\r\n\r\n\r\n    function handleChange(value: any) {\r\n        helpers.setValue(value);\r\n    }\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props} hidden/>\r\n            <Select \r\n                options={props.options}\r\n                placeholder={props.placeholder}\r\n                defaultValue={props.defaultValue}\r\n                onChange={(event, data ) => {\r\n                    handleChange(data.value);\r\n                }}\r\n            />\r\n            {/* <HexColorPicker\r\n                color={field.value} onChange={(value) => handleChange(value)} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null} */}\r\n        </Form.Field>\r\n    )\r\n}","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string,\r\n    name: string,\r\n    label?: string,\r\n    type?: string,\r\n}\r\n\r\nexport default function FTextInput(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import React from 'react';\r\nimport { Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button, DropdownItemProps, Header } from \"semantic-ui-react\";\r\nimport FSelectInput from \"../../../app/common/form/FSelectInput\";\r\nimport FTextInput from \"../../../app/common/form/FTextInput\";\r\nimport { IntegrationType, NewIntegration } from \"../../../app/models/integration\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\n\r\ninterface Props{\r\n    setOpen: (isOpen: boolean) => void;\r\n}\r\n\r\nexport default observer(function NewIntegrationForm({setOpen}:Props){\r\n\r\n    const {ordersStore} = useStore();\r\n\r\n    const groupsOptions: DropdownItemProps[] = [{\r\n        key: 0,\r\n        value: 0,\r\n        text: 'Woocommerce'\r\n    }];\r\n\r\n\r\n    const newIntegration: NewIntegration = {\r\n        client_key: '',\r\n        privateName: '',\r\n        private_key: '',\r\n        siteUrl: '',\r\n        type: IntegrationType.Woocommerce\r\n    }\r\n\r\n    return(\r\n        <Formik\r\n            initialValues={newIntegration}\r\n            onSubmit={(values, { setErrors }) => {\r\n         \r\n                ordersStore.createIntegration(values).then(() =>\r\n                    {\r\n                    ordersStore.loadIntegrations();\r\n                    setOpen(false);\r\n                    }    \r\n                ).catch((errors) => {\r\n                    setErrors(errors);\r\n                    console.log(errors);\r\n                })\r\n            }\r\n            }\r\n        >\r\n            {({ handleSubmit, isSubmitting, errors }) => (\r\n                <Form className='ui form'\r\n                    onSubmit={handleSubmit}\r\n                    autoComplete='off'\r\n                    style={{ padding: '2rem',marginBottom: '2rem' }}\r\n                >\r\n                    <Header as='h2' textAlign='center'>\r\n                    Dodaj integracje\r\n                        </Header>\r\n                    <FTextInput name='privateName' placeholder='Nazwa Integracji' />\r\n                    <FSelectInput name='groupId' placeholder='Wybierz typ integracji' options={groupsOptions} />\r\n                    {newIntegration.type === IntegrationType.Woocommerce && (\r\n                        <>\r\n                        <FTextInput name='siteUrl' placeholder='Url strony' />\r\n                        <FTextInput name='client_key' placeholder=\"Klucz klienta\" />\r\n                        <FTextInput name='private_key' placeholder=\"Klucz prywatny\" />\r\n                        </>\r\n                    )}\r\n                    <Button type='submit' icon='check' loading={isSubmitting} floated='right' color='green' />\r\n                </Form>\r\n            )}\r\n\r\n        </Formik >\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { useState } from \"react\";\r\nimport { Modal } from \"semantic-ui-react\";\r\nimport NewIntegrationForm from \"./NewIntegrationForm\";\r\n\r\ninterface Props {\r\n    component: React.FunctionComponent | React.ReactElement;\r\n}\r\n\r\nexport default observer(function NewIntegrationModal({ component }: Props) {\r\n    \r\n    const [isOpen, setOpen] = useState(false);\r\n\r\n    return (\r\n        <Modal\r\n            closeIcon\r\n            size='tiny'\r\n            onClose={() => setOpen(false)}\r\n            onOpen={() => setOpen(true)}\r\n            open={isOpen}\r\n            trigger={component}\r\n        >\r\n            <NewIntegrationForm setOpen={setOpen} />\r\n        </Modal>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect } from \"react\";\r\nimport { Accordion, Button, Container, Divider, Header, Segment } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport IntegrationAccordionElement from \"./IntegrationAccordionElement\";\r\nimport NewIntegrationModal from \"./NewIntegrationModal\";\r\n\r\nexport default observer(function Integrations(){\r\n\r\n    const {ordersStore} = useStore();\r\n    const {integrations} = ordersStore;\r\n\r\n    useEffect(()=>{\r\n        ordersStore.loadIntegrations();\r\n    },[ordersStore])\r\n\r\n    return(\r\n        <Segment>\r\n             <Container textAlign=\"center\">\r\n                <Header as=\"h1\" size=\"large\" content=\"Integracje\" color=\"teal\" />\r\n             </Container>\r\n            <Divider />\r\n            <NewIntegrationModal \r\n            component={<Button content='Dodaj Integracje'/>}\r\n            />\r\n            <Container\r\n            textAlign=\"center\"\r\n            >\r\n                <Accordion styled exclusie={false} fluid>\r\n                    {integrations && \r\n                        integrations.map(integration => (\r\n                            <IntegrationAccordionElement integration={integration} />\r\n                        ))\r\n                    }\r\n                </Accordion>\r\n            </Container>\r\n        </Segment>\r\n    )\r\n})","import { Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Button, Divider, Form, Header, Icon, List, Segment } from \"semantic-ui-react\";\r\nimport FTextInput from \"../../../../app/common/form/FTextInput\";\r\nimport { Order } from \"../../../../app/models/order\";\r\nimport { useStore } from \"../../../../app/stores/store\";\r\n\r\ninterface Props {\r\n    order: Order;\r\n    changeEditMode: (isEdited: boolean) => void;\r\n}\r\n\r\nexport default observer(function OrderInfoDetailsEditForm({ order, changeEditMode }: Props) {\r\n\r\n    const { ordersStore } = useStore();\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={\r\n                order\r\n            }\r\n            onSubmit={(values, { setErrors }) => {\r\n                ordersStore.editOrder(values).then(() => changeEditMode(false))\r\n                    .catch((errors) => setErrors(errors));\r\n            }\r\n            }\r\n        >\r\n            {({ handleSubmit, isSubmitting, errors }) => (\r\n                <Segment style={{ marginLeft: 50, height: '100%' }} >\r\n                    <Form className='ui form' onSubmit={handleSubmit} >\r\n                        <Header>\r\n                            Informacje\r\n                            <Button type='submit'\r\n                                circular\r\n                                floated='right'\r\n                                icon\r\n                                loading={isSubmitting}\r\n                                style={{ fontSize: '1rem', padding: 10 }}>\r\n                                <Icon name='edit' />\r\n                            </Button>\r\n                        </Header>\r\n                        <List verticalAlign='middle'>\r\n                            <List.Item>\r\n                                <List.Icon name='users' />\r\n                                <List.Content>\r\n                                    Login Klienta: <FTextInput name='clientLogin' placeholder='Login Klienta' />\r\n                                </List.Content>\r\n                            </List.Item>\r\n                            <List.Item>\r\n                                <List.Icon name='mail' />\r\n                                <List.Content>\r\n                                    Email: <FTextInput name='email' placeholder='Email' />\r\n                                </List.Content>\r\n                            </List.Item>\r\n                            <List.Item>\r\n                                <List.Icon name='phone' />\r\n                                <List.Content>\r\n                                    Telefon: <FTextInput name='phoneNumber' placeholder='Numer Telefonu' />\r\n                                </List.Content>\r\n                            </List.Item>\r\n                        </List>\r\n                        <Divider />\r\n                        <List verticalAlign='middle'>\r\n                            <List.Item>\r\n                                <List.Icon name='money' />\r\n                                <List.Content>\r\n                                    Cena dostawy: <FTextInput name='deliveryPrice' placeholder='Cena dostawy' /> zł\r\n                                </List.Content>\r\n                            </List.Item>\r\n                            <List.Item>\r\n                                <List.Icon name='payment' />\r\n                                <List.Content>\r\n                                    Metoda Płatności: <FTextInput name='paymentMethod' placeholder='Metoda Płatności' />\r\n                                </List.Content>\r\n                            </List.Item>\r\n                            <List.Item>\r\n                                <List.Icon name='truck' />\r\n                                <List.Content>\r\n                                    Metoda Dostawy: <FTextInput name='deliveryMethod' placeholder='Metoda Dostawy' />\r\n                                </List.Content>\r\n                            </List.Item>\r\n                        </List>\r\n                        <Divider />\r\n                        <List verticalAlign='middle'>\r\n                            <List.Item>\r\n                                <List.Icon name='comment alternate outline' />\r\n                                <List.Content>\r\n                                    Wiadomość klienta: <FTextInput name='clientMessage' placeholder='Wiadomość od klienta' />\r\n                                </List.Content>\r\n                            </List.Item>\r\n                        </List>\r\n                    </Form>\r\n                </Segment>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { useState } from \"react\";\r\nimport { Button, Divider, Header, Icon, List, Segment } from \"semantic-ui-react\";\r\nimport { Order } from \"../../../app/models/order\";\r\nimport OrderInfoDetailsEditForm from \"./edit/OrderInfoDetailsEditForm\";\r\n\r\ninterface Props {\r\n    order: Order;\r\n    descriptionStyle?: {};\r\n}\r\n\r\nexport default observer(function OrderInfoDetails({ order }: Props) {\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    function changeEditMode(isEdited: boolean) {\r\n        setEditMode(isEdited);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {editMode ? (\r\n                <OrderInfoDetailsEditForm order={order} changeEditMode={changeEditMode} />\r\n            ) : (\r\n                <Segment style={{ marginLeft: 50, height: '100%' }} >\r\n                    <Header>\r\n                        Informacje\r\n                        <Button onClick={() => changeEditMode(true)} circular floated='right' icon style={{ fontSize: '1rem', padding: 10 }}>\r\n                            <Icon name='edit' />\r\n                        </Button>\r\n                    </Header>\r\n                    <List verticalAlign='middle'>\r\n                        <List.Item>\r\n                            <List.Icon name='users' />\r\n                            <List.Content>\r\n                                Login Klienta: {order.clientLogin}\r\n                            </List.Content>\r\n                        </List.Item>\r\n                        <List.Item>\r\n                            <List.Icon name='mail' />\r\n                            <List.Content>\r\n                                Email: {order.email}\r\n                            </List.Content>\r\n                        </List.Item>\r\n                        <List.Item>\r\n                            <List.Icon name='phone' />\r\n                            <List.Content>\r\n                                Telefon: {order.phoneNumber}\r\n                            </List.Content>\r\n                        </List.Item>\r\n                    </List>\r\n                    <Divider />\r\n                    <List verticalAlign='middle'>\r\n                        <List.Item>\r\n                            <List.Icon name='money' />\r\n                            <List.Content>\r\n                                Cena dostawy: {order.deliveryPrice} zł\r\n                            </List.Content>\r\n                        </List.Item>\r\n                        <List.Item>\r\n                            <List.Icon name='payment' />\r\n                            <List.Content>\r\n                                Metoda Płatności: {order.paymentMethod}\r\n                            </List.Content>\r\n                        </List.Item>\r\n                        <List.Item>\r\n                            <List.Icon name='truck' />\r\n                            <List.Content>\r\n                                Metoda Dostawy: {order.deliveryMethod}\r\n                            </List.Content>\r\n                        </List.Item>\r\n                    </List>\r\n                    <Divider />\r\n                    <List verticalAlign='middle'>\r\n                        <List.Item>\r\n                            <List.Icon name='comment alternate outline' />\r\n                            <List.Content>\r\n                                Wiadomość klienta: {order.clientMessage}\r\n                            </List.Content>\r\n                        </List.Item>\r\n                    </List>\r\n                </Segment>\r\n            )}\r\n        </>\r\n    )\r\n})","import { Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Button, Header, Icon, List, Form } from \"semantic-ui-react\";\r\nimport FTextInput from \"../../../../app/common/form/FTextInput\";\r\nimport { Order } from \"../../../../app/models/order\";\r\nimport { useStore } from \"../../../../app/stores/store\";\r\n\r\ninterface Props {\r\n    order: Order,\r\n    changeEditMode: (isEdited: boolean) => void;\r\n    descriptionStyle: {} | undefined,\r\n}\r\n\r\nexport default observer(function OrderInfoDeliveryEditForm({ order, changeEditMode, descriptionStyle }: Props) {\r\n\r\n    const { ordersStore } = useStore();\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={order}\r\n            onSubmit={(values, { setErrors }) => {\r\n                ordersStore.editOrder(values).then(() => changeEditMode(false))\r\n                    .catch((errors) => setErrors(errors));\r\n            }}\r\n        >\r\n            {({ handleSubmit, isSubmitting, errors }) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} >\r\n                    <Header>\r\n                        Adres Dostawy\r\n                        <Button loading={isSubmitting} circular floated='right' icon style={{ fontSize: '1rem', padding: 10 }}>\r\n                            <Icon name='edit' />\r\n                        </Button>\r\n                    </Header>\r\n                    <List>\r\n                        <List.Item>\r\n                            <List.Description style={descriptionStyle} > Imię i Nazwisko </List.Description>\r\n                            <Form.Group widths={2}>\r\n                                <FTextInput name='firstName' placeholder='Imię' />\r\n                                <FTextInput name='lastName' placeholder='Nazwisko' />\r\n                            </Form.Group>\r\n                        </List.Item>\r\n                        <List.Item>\r\n                            <List.Description style={descriptionStyle} >Adres</List.Description>\r\n                            <FTextInput name='deliveryAddress.street' placeholder='Ulica' />\r\n                        </List.Item>\r\n                        <List.Item>\r\n                            <List.Description style={descriptionStyle} >Kod Pocztowy</List.Description>\r\n                            <FTextInput name='deliveryAddress.zipcode' placeholder='Kod Pocztowy' />\r\n                        </List.Item>\r\n                        <List.Item>\r\n                            <List.Description style={descriptionStyle} >Miasto</List.Description>\r\n                            <FTextInput name='deliveryAddress.city' placeholder='Miasto' />\r\n                        </List.Item>\r\n                        <List.Item>\r\n                            <List.Description style={descriptionStyle} >Kraj</List.Description>\r\n                            <FTextInput name='deliveryAddress.country' placeholder='Kraj' />\r\n                        </List.Item>\r\n                    </List>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { useState } from \"react\";\r\nimport { Button, Header, Icon, List } from \"semantic-ui-react\";\r\nimport { Order } from \"../../../app/models/order\";\r\nimport OrderInfoDeliveryEditForm from \"./edit/OrderInfoDeliveryEditForm\";\r\n\r\ninterface Props {\r\n    order: Order;\r\n    descriptionStyle?: {};\r\n}\r\n\r\nconst descriptionStyle = {\r\n    color: '#bfb3b3'\r\n}\r\n\r\nexport default observer(function OrderInfoDelivery({ order }: Props) {\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    function changeEditMode(isEdited: boolean) {\r\n        setEditMode(isEdited);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {editMode ? (\r\n                <OrderInfoDeliveryEditForm descriptionStyle={descriptionStyle} changeEditMode={changeEditMode} order={order} />\r\n            ) : (\r\n                <>\r\n                    <Header>\r\n                        Adres Dostawy\r\n                        <Button onClick={() => changeEditMode(true)} circular floated='right' icon style={{ fontSize: '1rem', padding: 10 }}>\r\n                            <Icon name='edit' />\r\n                        </Button>\r\n                    </Header>\r\n                    <List>\r\n                        <List.Item>\r\n                            <List.Description style={descriptionStyle} > Imię i Nazwisko </List.Description>\r\n                            <List.Header>{order.firstName} {order.lastName}</List.Header>\r\n                        </List.Item>\r\n                        <List.Item>\r\n                            <List.Description style={descriptionStyle} >Adres</List.Description>\r\n                            {order.deliveryAddress && (\r\n                                <List.Header>{order.deliveryAddress.street}</List.Header>\r\n                            )}\r\n                        </List.Item>\r\n                        <List.Item>\r\n                            <List.Description style={descriptionStyle} >Kod Pocztowy</List.Description>\r\n                            {order.deliveryAddress && (\r\n                                <List.Header>{order.deliveryAddress.zipCode}</List.Header>\r\n                            )}\r\n                        </List.Item>\r\n                        <List.Item>\r\n                            <List.Description style={descriptionStyle} >Miasto</List.Description>\r\n                            {order.deliveryAddress && (\r\n                                <List.Header>{order.deliveryAddress.city}</List.Header>\r\n                            )}\r\n                        </List.Item>\r\n                        <List.Item>\r\n                            <List.Description style={descriptionStyle} >Kraj</List.Description>\r\n                            <List.Header>Polska</List.Header>\r\n                        </List.Item>\r\n                    </List>\r\n                </>\r\n            )}\r\n        </>\r\n    )\r\n})","import { Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Button, Form, Header, Icon, List } from \"semantic-ui-react\";\r\nimport FTextInput from \"../../../../app/common/form/FTextInput\";\r\nimport { Order } from \"../../../../app/models/order\";\r\nimport { useStore } from \"../../../../app/stores/store\";\r\n\r\ninterface Props {\r\n    order: Order,\r\n    changeEditMode: (isEdited: boolean) => void;\r\n    descriptionStyle: {} | undefined,\r\n}\r\n\r\nexport default observer(function OrderInfoInvoiceEditForm({ order, changeEditMode, descriptionStyle }: Props) {\r\n\r\n    const { ordersStore } = useStore();\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={order}\r\n            onSubmit={(values, { setErrors }) => {\r\n                ordersStore.editOrder(values).then(() => changeEditMode(false)).catch(\r\n                    (erros) => setErrors(erros));\r\n            }}\r\n        >\r\n            {({ handleSubmit, isSubmitting, errors }) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} >\r\n                    <Header>\r\n                        Dane Faktury\r\n                        <Button type='submit' loading={isSubmitting} circular floated='right' icon style={{ fontSize: '1rem', padding: 10 }}>\r\n                            <Icon name='edit' />\r\n                        </Button>\r\n                    </Header>\r\n                    <List>\r\n                        <List.Item>\r\n                            <List.Description style={descriptionStyle} > Imię i Nazwisko </List.Description>\r\n                            <Form.Group widths={2}>\r\n                                <FTextInput name='invoice.firstName' placeholder='Imię' />\r\n                                <FTextInput name='invoice.lastName' placeholder='Nazwisko' />\r\n                            </Form.Group>\r\n                        </List.Item>\r\n                        <List.Item>\r\n                            <List.Description style={descriptionStyle} > Firma </List.Description>\r\n                            <FTextInput name='invoice.name' placeholder='Nazwa Firmy' />\r\n                        </List.Item>\r\n                        <List.Item>\r\n                            <List.Description style={descriptionStyle} >Adres</List.Description>\r\n                            <FTextInput name='invoice.address.street' placeholder='Ulica' />\r\n                        </List.Item>\r\n                        <List.Item>\r\n                            <List.Description style={descriptionStyle} >Kod Pocztowy</List.Description>\r\n                            <FTextInput name='invoice.address.zipcode' placeholder='Kod Pocztowy' />\r\n                        </List.Item>\r\n                        <List.Item>\r\n                            <List.Description style={descriptionStyle} >Miasto</List.Description>\r\n                            <FTextInput name='invoice.address.city' placeholder='Miasto' />\r\n                        </List.Item>\r\n                        <List.Item>\r\n                            <List.Description style={descriptionStyle} >NIP</List.Description>\r\n                            <FTextInput name='invoice.nip' placeholder='NIP' />\r\n                        </List.Item>\r\n                    </List>\r\n                </Form>\r\n            )}\r\n        </Formik >\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { useState } from \"react\";\r\nimport { Button, Header, Icon, List } from \"semantic-ui-react\";\r\nimport { Order } from \"../../../app/models/order\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport OrderInfoInvoiceEditForm from \"./edit/OrderInfoInvoiceEditForm\";\r\n\r\ninterface Props {\r\n  order: Order;\r\n  descriptionStyle?: {};\r\n}\r\n\r\nexport default observer(function OrderInfoInvoice({\r\n  order,\r\n  descriptionStyle,\r\n}: Props) {\r\n  const { ordersStore } = useStore();\r\n\r\n  const [editMode, setEditMode] = useState(false);\r\n\r\n  function changeEditMode(isEdited: boolean) {\r\n    setEditMode(isEdited);\r\n  }\r\n  \r\n  return (\r\n    <>\r\n      {editMode ? (\r\n        <OrderInfoInvoiceEditForm\r\n          order={order}\r\n          changeEditMode={changeEditMode}\r\n          descriptionStyle={descriptionStyle}\r\n        />\r\n      ) : (\r\n        <>\r\n          <Header>\r\n            Dane Faktury\r\n            <Button\r\n              onClick={() => changeEditMode(true)}\r\n              circular\r\n              floated=\"right\"\r\n              icon\r\n              style={{ fontSize: \"1rem\", padding: 10 }}\r\n            >\r\n              <Icon name=\"edit\" />\r\n            </Button>\r\n          </Header>\r\n          <List>\r\n            <List.Item>\r\n              <List.Description style={descriptionStyle}>\r\n                {\" \"}\r\n                Imię i Nazwisko{\" \"}\r\n              </List.Description>\r\n              <List.Header>\r\n                {order.invoice?.firstName} {order.invoice?.lastName}\r\n              </List.Header>\r\n            </List.Item>\r\n            <List.Item>\r\n              <List.Description style={descriptionStyle}>\r\n                {\" \"}\r\n                Firma{\" \"}\r\n              </List.Description>\r\n              <List.Header>{order.invoice?.name}</List.Header>\r\n            </List.Item>\r\n            <List.Item>\r\n              <List.Description style={descriptionStyle}>\r\n                Adres\r\n              </List.Description>\r\n              {order.invoice?.address && (\r\n                <List.Header>{order.invoice?.address?.street}</List.Header>\r\n              )}\r\n            </List.Item>\r\n            <List.Item>\r\n              <List.Description style={descriptionStyle}>\r\n                Kod Pocztowy\r\n              </List.Description>\r\n              {order.invoice?.address && (\r\n                <List.Header>{order.invoice?.address!.zipCode}</List.Header>\r\n              )}\r\n            </List.Item>\r\n            <List.Item>\r\n              <List.Description style={descriptionStyle}>\r\n                Miasto\r\n              </List.Description>\r\n              {order.invoice?.address && (\r\n                <List.Header>{order.invoice?.address?.city}</List.Header>\r\n              )}\r\n            </List.Item>\r\n            <List.Item>\r\n              <List.Description style={descriptionStyle}>NIP</List.Description>\r\n              <List.Header>{order.invoice?.nip}</List.Header>\r\n            </List.Item>\r\n          </List>\r\n          {order.invoice?.isCreated ? (\r\n              <Button\r\n                content=\"Pobierz fakturę\"\r\n                onClick={() => {\r\n                  ordersStore.getInvoice(order.id.toString());\r\n                }}\r\n              />\r\n          ) : (\r\n              <Button\r\n                content=\"Utwórz fakturę\"\r\n                onClick={() => {\r\n                  ordersStore.createInvoice(order.id.toString());\r\n                }}\r\n              />\r\n          )}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n});\r\n","import { Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Button, Form, Header, Icon, List } from \"semantic-ui-react\";\r\nimport FTextInput from \"../../../../app/common/form/FTextInput\";\r\nimport { Order } from \"../../../../app/models/order\";\r\nimport { useStore } from \"../../../../app/stores/store\";\r\n\r\ninterface Props {\r\n    order: Order;\r\n    changeEditMode: (isEdited: boolean) => void;\r\n    descriptionStyle: {} | undefined,\r\n}\r\n\r\nexport default observer(function OrderInfoPickupPointEditForm({ order, changeEditMode, descriptionStyle }: Props) {\r\n\r\n    const { ordersStore } = useStore();\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={order}\r\n            onSubmit={(values, { setErrors }) => {\r\n                ordersStore.editOrder(values).then(() => changeEditMode(false)).catch((errors) => setErrors(errors));\r\n            }}\r\n        >\r\n            {({ isSubmitting, handleSubmit }) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} >\r\n                    <Header>\r\n                        Odbiór w Punkcie\r\n                        <Button type='submit' loading={isSubmitting} circular floated='right' icon style={{ fontSize: '1rem', padding: 10 }}>\r\n                            <Icon name='edit' />\r\n                        </Button>\r\n                    </Header>\r\n                    <List>\r\n                        <List.Item>\r\n                            <List.Description style={descriptionStyle} > Nazwa </List.Description>\r\n                            <FTextInput name='pickup.name' placeholder='Nazwa Punktu' />\r\n                        </List.Item>\r\n                        <List.Item>\r\n                            <List.Description style={descriptionStyle} > ID </List.Description>\r\n                            <FTextInput name='pickup.id' placeholder='ID Punktu' />\r\n                        </List.Item>\r\n                        <List.Item>\r\n                            <List.Description style={descriptionStyle} > Adres </List.Description>\r\n                            <FTextInput name='pickup.address' placeholder='Adres' />\r\n                        </List.Item>\r\n                        <List.Item>\r\n                            <List.Description style={descriptionStyle} >Kod pocztowy</List.Description>\r\n                            <FTextInput name='pickup.zipcode' placeholder='Kod pocztowy' />\r\n                        </List.Item>\r\n                        <List.Item>\r\n                            <List.Description style={descriptionStyle} >Miasto</List.Description>\r\n                            <FTextInput name='pickup.city' placeholder='Miasto' />\r\n                        </List.Item>\r\n                    </List>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { useState } from \"react\";\r\nimport { Button, Header, Icon, List } from \"semantic-ui-react\";\r\nimport { Order } from \"../../../app/models/order\";\r\nimport OrderInfoPickupPointEditForm from \"./edit/OrderInfoPickupPointEditForm\";\r\n\r\ninterface Props {\r\n    order: Order;\r\n    descriptionStyle?: {},\r\n}\r\n\r\nconst descriptionStyle = {\r\n    color: '#bfb3b3'\r\n}\r\n\r\nexport default observer(function OrderInfoPickupPoint({ order }: Props) {\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    function changeEditMode(isEdited: boolean) {\r\n        setEditMode(isEdited);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {editMode ? (\r\n                <OrderInfoPickupPointEditForm changeEditMode={changeEditMode} order={order} descriptionStyle={descriptionStyle} />\r\n            ) : (\r\n                <>\r\n                    <Header>\r\n                        Odbiór w Punkcie\r\n                        <Button onClick={() => changeEditMode(true)} circular floated='right' icon style={{ fontSize: '1rem', padding: 10 }}>\r\n                            <Icon name='edit' />\r\n                        </Button>\r\n                    </Header>\r\n                    <List>\r\n                        <List.Item>\r\n                            <List.Description style={descriptionStyle} > Nazwa </List.Description>\r\n                            <List.Header>{order.pickUpPoint?.name}</List.Header>\r\n                        </List.Item>\r\n                        <List.Item>\r\n                            <List.Description style={descriptionStyle} > ID </List.Description>\r\n                            <List.Header>{order.pickUpPoint?.pointId}</List.Header>\r\n                        </List.Item>\r\n                        <List.Item>\r\n                            <List.Description style={descriptionStyle} > Adres </List.Description>\r\n                            <List.Header>{order.pickUpPoint?.address?.street}</List.Header>\r\n                        </List.Item>\r\n                        <List.Item>\r\n                            <List.Description style={descriptionStyle} >Kod pocztowy</List.Description>\r\n                            <List.Header>{order.pickUpPoint?.address?.zipCode}</List.Header>\r\n                        </List.Item>\r\n                        <List.Item>\r\n                            <List.Description style={descriptionStyle} >Miasto</List.Description>\r\n                            <List.Header>{order.pickUpPoint?.address?.city}</List.Header>\r\n                        </List.Item>\r\n                    </List>\r\n                </>\r\n            )}\r\n        </>\r\n    )\r\n})","import React from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Order } from \"../../../app/models/order\";\r\nimport { Grid, Segment } from \"semantic-ui-react\";\r\nimport OrderInfoDetails from \"./OrderInfoDetails\";\r\nimport OrderInfoDelivery from \"./OrderInfoDelivery\";\r\nimport OrderInfoInvoice from \"./OrderInfoInvoice\";\r\nimport OrderInfoPickupPoint from \"./OrderInfoPickupPoint\";\r\n\r\ninterface Props {\r\n    order: Order;\r\n}\r\n\r\nconst descriptionStyle = {\r\n    color: '#bfb3b3'\r\n}\r\n\r\nexport default observer(function OrderInfo({ order }: Props) {\r\n    return (\r\n        <>\r\n            <Grid>\r\n                <Grid.Row columns={2} >\r\n                    <Grid.Column>\r\n                        <OrderInfoDetails descriptionStyle={descriptionStyle} order={order} />\r\n                    </Grid.Column>\r\n                    <Grid.Column>\r\n                        <Segment style={{ marginRight: 50, height: '100%' }} >\r\n                            <Grid>\r\n                                <Grid.Row divided columns={3}>\r\n                                    <Grid.Column>\r\n                                        <OrderInfoDelivery descriptionStyle={descriptionStyle} order={order} />\r\n                                    </Grid.Column>\r\n                                    <Grid.Column>\r\n                                        <OrderInfoInvoice descriptionStyle={descriptionStyle} order={order} />\r\n                                    </Grid.Column>\r\n                                    <Grid.Column>\r\n                                        <OrderInfoPickupPoint descriptionStyle={descriptionStyle} order={order} />\r\n                                    </Grid.Column>\r\n                                </Grid.Row>\r\n                            </Grid>\r\n\r\n                        </Segment>\r\n                    </Grid.Column>\r\n\r\n                </Grid.Row>\r\n            </Grid>\r\n        </>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { useState } from \"react\";\r\nimport { Button,  Icon, Input, Table } from \"semantic-ui-react\";\r\nimport { OrderProduct } from \"../../../../app/models/orderProduct\";\r\nimport { useStore } from \"../../../../app/stores/store\";\r\n\r\ninterface Props {\r\n  product: OrderProduct;\r\n  editMode: (isEditMode: boolean) => void;\r\n}\r\n\r\nexport default observer(function OrderProductRowEdit({\r\n  product,\r\n  editMode,\r\n}: Props) {\r\n\r\n  const { ordersStore } = useStore();\r\n  \r\n  const [editedProduct, setEditedProduct] = useState<OrderProduct>(product)\r\n\r\n\r\n  return (   \r\n    <Table.Row key={product.id}>\r\n            <Table.Cell  width=\"1\" textAlign=\"center\">\r\n              <Icon name=\"box\" />\r\n            </Table.Cell>\r\n            <Table.Cell width=\"1\" textAlign=\"center\">\r\n            <Input disabled value={editedProduct.externalId} />           \r\n            </Table.Cell>\r\n            <Table.Cell  singleLine>\r\n              <Input  value={editedProduct.name} onChange={(evt: any) => {\r\n                console.log(evt.target.value);\r\n                setEditedProduct({...editedProduct, name: evt.target.value});\r\n              }} />\r\n            </Table.Cell>\r\n            <Table.Cell width=\"1\"  singleLine>\r\n              <Input  \r\n                type='number'\r\n                min='0'\r\n                step='1'\r\n                value={editedProduct.quantity} onChange={(evt: any) => {\r\n                console.log(evt.target.value);\r\n                setEditedProduct({...editedProduct, quantity: evt.target.value});\r\n              }} />\r\n            </Table.Cell>\r\n            <Table.Cell width=\"1\" singleLine>\r\n            <Input  \r\n                type='number'\r\n                min='0'\r\n                step='.01'\r\n                label={{basic:true, content:'zł'}}\r\n                labelPosition='right'\r\n                value={editedProduct.price} onChange={(evt: any) => {\r\n                console.log(evt.target.value);\r\n                setEditedProduct({...editedProduct, price: evt.target.value});\r\n              }} />\r\n            </Table.Cell>\r\n            <Table.Cell width=\"1\" singleLine>\r\n              <Input \r\n              label={{basic:true, content:'%'}}\r\n              labelPosition='right'\r\n              value=\"23\" />\r\n            </Table.Cell>\r\n            <Table.Cell width=\"1\" singleLine>\r\n            <Input\r\n                label={{basic:true, content:'kg'}}\r\n                labelPosition='right'\r\n                type='number'\r\n                min='0'\r\n                step='.01'\r\n                value={editedProduct.weight} onChange={(evt: any) => {\r\n                console.log(evt.target.value);\r\n                setEditedProduct({...editedProduct, weight: evt.target.value});\r\n              }} />\r\n            </Table.Cell>\r\n            <Table.Cell width=\"1\" singleLine>\r\n              <Button onClick={() => {\r\n                ordersStore.editProductOrder(editedProduct);\r\n                editMode(false);\r\n              }} type=\"button\" content=\"Edytuj\" />\r\n            </Table.Cell>\r\n      </Table.Row>\r\n  );\r\n});\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Dropdown, Icon, Table } from \"semantic-ui-react\";\r\nimport { OrderProduct } from \"../../../app/models/orderProduct\";\r\nimport OrderProductRowEdit from \"./edit/OrderProductRowEdit\";\r\n\r\ninterface Props {\r\n  product: OrderProduct;\r\n  editMode?: boolean;\r\n}\r\n\r\nexport default observer(function OrderProdutRow({ product, editMode }: Props) {\r\n\r\n    useEffect(()=>{\r\n        if(editMode){\r\n            setEditMode(editMode);\r\n        };\r\n    },[editMode])\r\n\r\n    const [isEditMode, setEditMode] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      {isEditMode ? (\r\n          <OrderProductRowEdit product={product} editMode={setEditMode} />\r\n      ) : (\r\n        <Table.Row>\r\n          <Table.Cell width=\"1\" textAlign=\"center\">\r\n            <Icon name=\"box\" />\r\n          </Table.Cell>\r\n          <Table.Cell width=\"1\" singleLine>\r\n            {product.externalId}\r\n          </Table.Cell>\r\n          <Table.Cell singleLine>{product.name}</Table.Cell>\r\n          <Table.Cell width=\"1\" singleLine>\r\n            {product.quantity}\r\n          </Table.Cell>\r\n          <Table.Cell width=\"1\" singleLine>\r\n            {product.price} PLN\r\n          </Table.Cell>\r\n          <Table.Cell width=\"1\" singleLine>\r\n            23%\r\n          </Table.Cell>\r\n          <Table.Cell width=\"1\" singleLine>\r\n            {product.weight}kg\r\n          </Table.Cell>\r\n          <Table.Cell width=\"1\" singleLine>\r\n            <Dropdown icon=\"cogs\">\r\n              <Dropdown.Menu>\r\n                <Dropdown.Item icon=\"edit\" onClick={() => setEditMode(!isEditMode)} />\r\n                <Dropdown.Item icon=\"delete\" />\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n          </Table.Cell>\r\n        </Table.Row>\r\n      )}\r\n    </>\r\n  );\r\n});\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Button,  Header,  Icon, Table } from \"semantic-ui-react\";\r\nimport { Order } from \"../../../app/models/order\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport OrderProductRow from \"./OrderProductRow\";\r\n\r\ninterface Props {\r\n  order: Order;\r\n}\r\n\r\nexport default observer(function OrderProducts({ order }: Props) {\r\n\r\n  const {ordersStore} = useStore();\r\n\r\n  return (\r\n    <>\r\n      <Table celled padded>\r\n        <Table.Header>\r\n          <Table.Row>\r\n            <Table.HeaderCell>\r\n              <Icon name=\"image\" />\r\n            </Table.HeaderCell>\r\n            <Table.HeaderCell>\r\n              Id\r\n              <Header sub color='grey' >Zewnętrzne</Header>\r\n              </Table.HeaderCell>\r\n            <Table.HeaderCell>Nazwa</Table.HeaderCell>\r\n            <Table.HeaderCell>Ilość</Table.HeaderCell>\r\n            <Table.HeaderCell>Cena</Table.HeaderCell>\r\n            <Table.HeaderCell>Vat</Table.HeaderCell>\r\n            <Table.HeaderCell>Waga</Table.HeaderCell>\r\n            <Table.HeaderCell>Akcje</Table.HeaderCell>\r\n          </Table.Row>\r\n        </Table.Header>\r\n\r\n        <Table.Body>\r\n          {order.products &&\r\n            order.products.map((product) => (\r\n            <OrderProductRow key={product.id} product={product} />\r\n            ))}\r\n        </Table.Body>\r\n      </Table>\r\n      <Button  floated='right' color='yellow' icon='add' circular onClick={() => {\r\n          ordersStore.addNewProductToOrder();\r\n      }} />\r\n    </>\r\n  );\r\n});\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, {  useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { Button, Dropdown, Header, Icon, Label, Segment } from \"semantic-ui-react\";\r\nimport { history } from \"../../..\";\r\nimport { Status } from \"../../../app/models/status\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport OrderInfo from \"./OrderInfo\";\r\nimport OrderProducts from \"./OrderProducts\";\r\n\r\nexport default observer(function OrderDetails() {\r\n\r\n    const { ordersStore } = useStore();\r\n    const { cleareSelectedOrder, loadOrder, selectedOrder: order, loading, loadOrderStatus } = ordersStore;\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n    const [showEditStatus, setShowEditStatus] = useState(false);    \r\n\r\n    const countryOptions: any[] = []\r\n\r\n    const [status,setStatus] = useState<Status>({\r\n        id: -1,\r\n        color: '#FFFFFF',\r\n        index: -1,\r\n        name: 'None'\r\n    });\r\n\r\n      ordersStore.statuses?.forEach(x=> countryOptions.push({\r\n          key: x.id,\r\n          value: x.id,\r\n          text: x.name,\r\n      }))\r\n\r\n      function updateStatus (statusId: number){\r\n            const findedStatus = ordersStore.statuses?.find(x=>x.id === statusId);\r\n            setStatus(findedStatus!);\r\n            console.log(status.name)\r\n      }\r\n\r\n    useEffect(() => {\r\n        async function loadOrderAndStatus(){\r\n        const founderOrder = await loadOrder(parseInt(id));\r\n        if(founderOrder){\r\n            var status = loadOrderStatus(parseInt(founderOrder.statusId!));\r\n            setStatus(status!);\r\n        }}\r\n\r\n        loadOrderAndStatus();\r\n    \r\n        return () => {\r\n            cleareSelectedOrder();\r\n        }\r\n    }, [loadOrder, cleareSelectedOrder, id, loadOrderStatus])\r\n\r\n    function returnToList() {\r\n        history.goBack();\r\n    }\r\n\r\n    if (loading || !order) return (null);\r\n\r\n    return (\r\n        <>\r\n            <Button\r\n                onClick={returnToList}\r\n                color='yellow'\r\n                style={{ margin: 50, marginBottom: 5 }}>\r\n                <Icon name='reply' />\r\n                Cofnij\r\n            </Button>\r\n\r\n            <Header\r\n                style={{ margin: 50, marginBottom: 5, marginTop: 35 }}>\r\n                Zamówienie {order.id}\r\n                {showEditStatus ? \r\n                (<Dropdown \r\n                    placeholder='Wybierz status' \r\n                    options={countryOptions} \r\n                    inline\r\n                    selection\r\n                    onChange={(e: any,{name,value}: any)=>{\r\n                        console.log('Name '+ name+ \" Value: \"+ value);\r\n                        ordersStore.updateOrderStatus(order.id, value).then(() => setShowEditStatus(false));\r\n                        updateStatus(value);\r\n                    }}\r\n                    style={{marginLeft: '2rem', }}\r\n                    />) : (\r\n                        <>\r\n                        {status && \r\n                        <Label\r\n                        tag\r\n                        onClick={()=>setShowEditStatus(true)}\r\n                        style={{ backgroundColor: status.color, color: 'white', marginLeft: '1.3rem' }} >\r\n                        {status.name}\r\n                 </Label>    \r\n                        }\r\n                        </>\r\n                      \r\n                )}\r\n                <Header.Subheader>\r\n                    0{order.orderedAt}\r\n                </Header.Subheader>\r\n            </Header>\r\n            <Segment style={{ margin: 50, marginTop: 10 }} >\r\n                <OrderProducts order={order} />\r\n            </Segment>\r\n            <OrderInfo order={order} />\r\n        </>\r\n    )\r\n})","import { Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\nimport FTextInput from \"../../../app/common/form/FTextInput\";\r\nimport { Button, DropdownItemProps, Form } from \"semantic-ui-react\";\r\nimport FSelectInput from \"../../../app/common/form/FSelectInput\";\r\n\r\nexport default observer(function AddOrderForm() {\r\n\r\n    const { ordersStore } = useStore();\r\n    const digitsOnly = (value:any) => /^\\d+$/.test(value)\r\n    const validationSchema = Yup.object({\r\n        statusId: Yup.number().required('Musisz wybrać status'),\r\n        email: Yup.string().email(\"Niepoprawny format\"),\r\n        phoneNumber: Yup.string().required('Numer NIP jest wymagany').test('Tylko liczby','Pole powinno zawierać tylko liczby', digitsOnly),\r\n    })\r\n    const statusOptions: DropdownItemProps[] = [];\r\n    ordersStore.statuses?.forEach(x=> statusOptions.push({\r\n        key: x.id,\r\n        value: x.id.toString(),\r\n        text: x.name\r\n    }))\r\n    \r\n\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{ clientLogin: \"\", firstName: \"\", lastName: \"\", phoneNumber: \"\", email: \"\", statusId: \"\", error: null }}\r\n            validationSchema={validationSchema}\r\n            onSubmit={(values, { setErrors }) => {\r\n                ordersStore.addOrder(values).catch(error => {\r\n                    setErrors({ error: 'Problem z dodaniem zamówienia' });\r\n                })\r\n            }\r\n                \r\n        }\r\n        >\r\n            {({ handleSubmit, isSubmitting, errors }) => (\r\n                <Form className='ui form' onSubmit={handleSubmit}\r\n                    autoComplete='off'>\r\n                    <Form.Group widths='equal'>\r\n                        <FTextInput label='Login' name='clientLogin' placeholder='Login Klienta' />\r\n                        <FTextInput label='Imię' name='firstName' placeholder='Imię' />\r\n                        <FTextInput label='Nazwisko' name='lastName' placeholder='Nazwisko' />\r\n                    </Form.Group>\r\n                    <Form.Group widths='equal'>\r\n                        <FTextInput label='Numer telefonu' name='phoneNumber' placeholder='Numer' />\r\n                        <FTextInput label='Email' name='email' placeholder='Email' />\r\n                    <FSelectInput label=\"Status\" name='statusId' placeholder='Wybierz grupę statusów' options={statusOptions} />\r\n                    </Form.Group>\r\n                    <Button loading={isSubmitting} floated='right' positive content='Dodaj' type='submit' />\r\n                    <Button color='black' content='Anuluj' onClick={() => ordersStore.setAddOrderModal(false)} />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Modal } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport AddOrderForm from \"./AddOrderForm\";\r\n\r\n\r\nexport default observer(function AddOrderModal() {\r\n\r\n    const { ordersStore } = useStore();\r\n\r\n    return (\r\n        <Modal\r\n            onClose={() => ordersStore.setAddOrderModal(false)}\r\n            onOpen={() => ordersStore.setAddOrderModal(true)}\r\n            open={ordersStore.addOrderModal}\r\n        >\r\n            <Modal.Header>Dodaj zamówienie</Modal.Header>\r\n            <Modal.Content>\r\n                <AddOrderForm />\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport { useEffect } from \"react\";\r\nimport { Accordion, Button, Label, Menu } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport AddOrderModal from \"../orders/AddOrderModal\";\r\n\r\n\r\nexport default observer(function StatusSidebar(){\r\n\r\n    const { ordersStore } = useStore();\r\n    const { statusGroups, setStatusId } = ordersStore;\r\n    \r\n    useEffect(() => {\r\n        if (!statusGroups) ordersStore.loadStatuses();\r\n    }, [statusGroups, ordersStore])\r\n\r\n\r\n      const accStatuses = statusGroups?.slice().sort(x=>x.index).map(groups =>({\r\n          key: groups.id,\r\n          title: groups.name,\r\n          content: groups.statuses?.slice().sort(x=>x.index).map(statuses=>(\r\n                    <Menu.Item\r\n                    key={statuses.id}\r\n                    name={statuses.name}\r\n                     onClick={() => setStatusId(statuses.id)}>\r\n                         {statuses.name}\r\n                         <Label\r\n                                style={{ backgroundColor: statuses.color}}\r\n                                content='' />\r\n                     </Menu.Item>\r\n          ))\r\n      }))\r\n\r\n    return(\r\n        <div className='container__sidebar' style={{ width: '15rem' }} >\r\n                <AddOrderModal />\r\n                <Menu vertical className='statuses__menu' >\r\n                    <Menu.Item>\r\n                        <Button content='Dodaj zamówienie' icon='plus' circular compact color='yellow'\r\n                            onClick={() => ordersStore.setAddOrderModal(true)}\r\n                        />\r\n                    </Menu.Item>\r\n                    <Menu.Item>\r\n                        <Menu.Header>Statusy Zamówień</Menu.Header>\r\n                    </Menu.Item>\r\n                    <Menu.Item name='all-orders' onClick={() => setStatusId(0)}>Wszystkie Zamówienia</Menu.Item>\r\n\r\n                    <Accordion styled\r\n                    exclusive={false}\r\n                    fluid\r\n                    defaultActiveIndex={[0]}\r\n                    panels={accStatuses}\r\n                    />\r\n                   \r\n                </Menu>\r\n            </div>\r\n    )\r\n})","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\nimport { HexColorPicker } from 'react-colorful';\r\n\r\ninterface Props {\r\n    placeholder: string,\r\n    name: string,\r\n    label?: string,\r\n    type?: string,\r\n}\r\n\r\nexport default function FColorPickerInput(props: Props) {\r\n    const [field, meta, helpers] = useField(props.name);\r\n\r\n\r\n    function handleChange(value: any) {\r\n        helpers.setValue(value);\r\n    }\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props} />\r\n            <HexColorPicker\r\n                color={field.value} onChange={(value) => handleChange(value)} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button, DropdownItemProps, Form, Header } from \"semantic-ui-react\";\r\nimport FColorPickerInput from \"../../../app/common/form/FColorPickerInput\";\r\nimport FSelectInput from \"../../../app/common/form/FSelectInput\";\r\nimport FTextInput from \"../../../app/common/form/FTextInput\";\r\nimport { Status } from \"../../../app/models/status\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\n\r\ninterface Props{\r\n    setOpen: (isOpen: boolean) => void;\r\n}\r\n\r\nexport default observer(function StatusCreateForm({setOpen}:Props){\r\n    \r\n    const {ordersStore} = useStore();\r\n\r\n    const groupsOptions: DropdownItemProps[] = [];\r\n    ordersStore.statusGroups?.forEach(x=> groupsOptions.push({\r\n        key: x.id,\r\n        value: x.id,\r\n        text: x.name\r\n    }))\r\n\r\n    const status: Status = {\r\n        id: 0,\r\n        color: '#FFFFFF',\r\n        name: '',\r\n        index: 0\r\n    }\r\n    const initialVal = {\r\n        status: status,\r\n        groupId: 0\r\n    }\r\n\r\n    const validationSchema = Yup.object({\r\n        groupId: Yup.number().moreThan(0),\r\n        status: Yup.object().shape({\r\n            name: Yup.string().required('Nazwa jest wymagana')\r\n        })\r\n    })\r\n\r\n    return(\r\n        <Formik\r\n            initialValues={initialVal}\r\n            onSubmit={(values, { setErrors }) => {\r\n                ordersStore.createStatus(values.groupId,values.status).then(() =>\r\n                    setOpen(false)\r\n                ).catch((errors) => {\r\n                    setErrors(errors);\r\n                    console.log(errors);\r\n                })\r\n            }}\r\n\r\n            validationSchema={validationSchema}\r\n        >\r\n            {({ handleSubmit, isSubmitting, errors }) => (\r\n                <Form className='ui form'\r\n                    onSubmit={handleSubmit}\r\n                    autoComplete='off'\r\n                    style={{ padding: '2rem',marginBottom: '2rem' }}\r\n                >\r\n                    <Header as='h2' textAlign='center'>\r\n                    Utwórz status\r\n                    <Header sub>ID: {status?.id}</Header>\r\n                        </Header>\r\n                    <FTextInput name='status.name' placeholder='Nazwa statusu' />\r\n                    <FSelectInput name='groupId' placeholder='Wybierz grupę statusów' options={groupsOptions} />\r\n                    <FColorPickerInput name='status.color' placeholder='Kolor HEX' type='text' />\r\n                    <Button type='submit' icon='check' loading={isSubmitting} floated='right' color='green' />\r\n                </Form>\r\n            )}\r\n\r\n        </Formik >\r\n    )\r\n})","import { Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Button, Form, Header} from \"semantic-ui-react\";\r\nimport FColorPickerInput from \"../../../app/common/form/FColorPickerInput\";\r\nimport FTextInput from \"../../../app/common/form/FTextInput\";\r\nimport { Status } from \"../../../app/models/status\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\n\r\ninterface Props{\r\n    status: Status;\r\n    setOpen: (isOpen: boolean) => void;\r\n}\r\n\r\nexport default observer(function StatusEditForm({status, setOpen}:Props) {\r\n\r\n    const { ordersStore } = useStore();\r\n\r\n    \r\n    \r\n\r\n    return (\r\n        <Formik\r\n            initialValues={status!}\r\n            onSubmit={(values, { setErrors }) => {\r\n                ordersStore.editStatus(values).then(() =>\r\n                    setOpen(false)\r\n                ).catch((errors) => setErrors(errors))\r\n            }\r\n            }\r\n        >\r\n            {({ handleSubmit, isSubmitting, errors }) => (\r\n                <Form className='ui form'\r\n                    onSubmit={handleSubmit}\r\n                    autoComplete='off'\r\n                    style={{ padding: '2rem' ,marginBottom: '2rem' }}\r\n                >\r\n                    <Header as='h2' textAlign='center'>\r\n                    Edytuj status\r\n                    <Header sub>ID: {status?.id}</Header>\r\n                        </Header>\r\n                    <FTextInput name='name' placeholder='Nazwa statusu' />\r\n                    <FColorPickerInput name='color' placeholder='Kolor HEX' type='text' />\r\n                    <Button type='submit' icon='check' loading={isSubmitting} floated='right' color='green' />\r\n                </Form>\r\n            )}\r\n\r\n        </Formik >\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { useState } from \"react\";\r\nimport { Modal } from \"semantic-ui-react\";\r\nimport { Status } from \"../../../app/models/status\";\r\nimport StatusCreateForm from \"./StatusCreateForm\";\r\nimport StatusEditForm from \"./StatusEditForm\";\r\n\r\ninterface Props {\r\n    component: React.FunctionComponent | React.ReactElement;\r\n    status?: Status;\r\n    isNew?: boolean;\r\n}\r\n\r\nexport default observer(function StatusModal({ component, status, isNew }: Props) {\r\n    \r\n    const [isOpen, setOpen] = useState(false);\r\n\r\n    return (\r\n        <Modal\r\n            closeIcon\r\n            size='tiny'\r\n            onClose={() => setOpen(false)}\r\n            onOpen={() => setOpen(true)}\r\n            open={isOpen}\r\n            trigger={component}\r\n        >\r\n            {isNew ? (\r\n            <StatusCreateForm setOpen={setOpen} />\r\n            ) : \r\n            <StatusEditForm \r\n            status={status!}\r\n            setOpen={setOpen}\r\n            />}\r\n            \r\n        </Modal>\r\n    )\r\n})","import React from \"react\";\r\nimport { Placeholder, Table } from \"semantic-ui-react\";\r\n\r\nexport default function OrderListPlaceholder() {\r\n\r\n    const n = 10;\r\n\r\n    return (\r\n        <Table.Body>\r\n            {[...Array(n)].map((e, i) => (\r\n                <Table.Row key={i} >\r\n                    <Table.Cell>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Table.Cell>\r\n                    <Table.Cell>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Table.Cell>\r\n                    <Table.Cell>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Table.Cell>\r\n                    <Table.Cell>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Table.Cell>\r\n                    <Table.Cell>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Table.Cell>\r\n                </Table.Row>\r\n            ))\r\n            }\r\n        </Table.Body >\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { Header, Label, Table } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport StatusModal from \"../statuses/StatusModal\";\r\nimport OrderListPlaceholder from \"./OrderListPlaceholder\";\r\n\r\nexport default observer(function OrdersList() {\r\n\r\n    const { ordersStore } = useStore();\r\n\r\n    useEffect(() => {\r\n        ordersStore.loadOrders();\r\n    }, [ordersStore])\r\n\r\n    return (\r\n        <>\r\n            <Header>\r\n                {ordersStore.selectedStatus?.id === 0 || !ordersStore.selectedStatus ? (\r\n                    <Label style={{ backgroundColor: '#fbbd08', color: 'white' }} >Wszystkie Zamówienia</Label>\r\n                ) : (\r\n                    <StatusModal \r\n                    status={ordersStore.selectedStatus}\r\n                    component={<Label style={{ backgroundColor: ordersStore.selectedStatus?.color, color: 'white' }} >{ordersStore.selectedStatus?.name}</Label>} />\r\n\r\n                )}\r\n            </Header>\r\n            <Table celled striped>\r\n                <Table.Header>\r\n                    <Table.Row>\r\n                        <Table.HeaderCell width='1'>Id</Table.HeaderCell>\r\n                        <Table.HeaderCell width='2'>Imię i Nazwisko</Table.HeaderCell>\r\n                        <Table.HeaderCell width='11' >Produkty</Table.HeaderCell>\r\n                        <Table.HeaderCell width='1'>Dostawa</Table.HeaderCell>\r\n                        <Table.HeaderCell width='2'>Informacje</Table.HeaderCell>\r\n                    </Table.Row>\r\n\r\n                </Table.Header>\r\n                {ordersStore.loading ? (\r\n                    <OrderListPlaceholder />\r\n                ) :\r\n                    <Table.Body>\r\n                        {ordersStore.listOfOrders.map(order => (\r\n                            <Table.Row key={order.id} >\r\n                                <Table.Cell collapsing>\r\n                                    <NavLink to={`/dashboard/zamowienia/${order.id}`}>{order.id} </NavLink>\r\n                                </Table.Cell>\r\n                                <Table.Cell collapsing>\r\n                                    {order.firstName} {order.lastName}\r\n                                </Table.Cell>\r\n                                <Table.Cell>\r\n                                    {order.products && order.products.map(product => (\r\n                                        <div key={product.id} >\r\n                                            {product.name} <Label tag> x {product.quantity} </Label>\r\n                                        </div>\r\n                                    ))}\r\n                                </Table.Cell>\r\n                                <Table.Cell collapsing>\r\n                                    {order.deliveryMethod}\r\n                                    <Label>\r\n                                        {order.deliveryPrice}                                      \r\n                                    </Label>\r\n                                </Table.Cell>\r\n                                <Table.Cell collapsing>\r\n                                </Table.Cell>\r\n                            </Table.Row>\r\n                        ))}\r\n                    </Table.Body>\r\n                }\r\n            </Table>\r\n        </>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport StatusSidebar from \"../statuses/StatusSidebar\";\r\nimport OrdersList from \"./OrdersList\";\r\n\r\n\r\nexport default observer(function Orders() {\r\n    return (\r\n        <div className='container__dashboard'>\r\n            <StatusSidebar />\r\n            <div className='container__main' style={{ paddingRight: 20 }}>\r\n                <OrdersList />\r\n            </div>\r\n        </div >\r\n    )\r\n})","import { Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Button, Grid, Header, Label } from \"semantic-ui-react\";\r\nimport agent from \"../../../app/api/agent\";\r\nimport FTextInput from \"../../../app/common/form/FTextInput\";\r\nimport { Company } from \"../../../app/models/company\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\n\r\nexport default observer(function SettingsInfoForm() {\r\n  const {ordersStore} = useStore();\r\n  const [company, setCompany] = useState<Company | undefined>(undefined);\r\n\r\n  useEffect(() => {\r\n    async function GetCompany() {\r\n      var temp = await agent.Company.get();\r\n      setCompany(temp);\r\n    }\r\n\r\n    GetCompany();\r\n  },[]);\r\n\r\n  return (\r\n    <>\r\n      {company && (\r\n        <Formik initialValues={company} \r\n        onSubmit={(values, {setErrors, setSubmitting}) => {\r\n            ordersStore.editCompanyInfo(values).then(()=> setSubmitting(false)).catch((errors) => setErrors(errors))\r\n        }}>\r\n          {({ handleSubmit, isSubmitting, errors }) => (\r\n            <Form\r\n              className=\"ui form\"\r\n              onSubmit={handleSubmit}\r\n              autoComplete=\"off\"\r\n              style={{ padding: \"2rem\", marginBottom: \"2rem\" }}\r\n            >\r\n              <Grid columns={2}>\r\n                <Grid.Column>\r\n                  <Label content=\"Nazwa firmy\" basic />\r\n                  <FTextInput name=\"name\" placeholder=\"Nazwa statusu\" />\r\n                  <Label content=\"Nip\" basic />\r\n                  <FTextInput name=\"nip\" placeholder=\"Nazwa statusu\" />\r\n                </Grid.Column>\r\n                <Grid.Column>\r\n                  <Label content=\"Nazwa ulicy\" basic />\r\n                  <FTextInput name=\"address.street\" placeholder=\"Ulica\" />\r\n                  <Grid columns={2}>\r\n                    <Grid.Column>\r\n                      <Label content=\"Kod pocztowy\" basic />\r\n                      <FTextInput\r\n                        name=\"address.zipCode\"\r\n                        placeholder=\"Kod pocztowy\"\r\n                      />\r\n                    </Grid.Column>\r\n                    <Grid.Column>\r\n                      <Label content=\"Miasto\" basic />\r\n                      <FTextInput\r\n                        name=\"address.city\"\r\n                        placeholder=\"Miasto\"\r\n                      />\r\n                    </Grid.Column>\r\n                  </Grid>\r\n                </Grid.Column>\r\n              </Grid>\r\n              <Button\r\n              style={{marginTop: 20}}\r\n                type='submit'\r\n                icon='check'\r\n                loading={isSubmitting}\r\n                floated='right'\r\n                color='green'\r\n              />\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      )}\r\n    </>\r\n  );\r\n});\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Segment } from \"semantic-ui-react\";\r\nimport SettingsInfoForm from \"./SettingsInfoForm\";\r\n\r\nexport default observer(function SettingsInfo(){\r\n    \r\n    return(\r\n        <>\r\n        <SettingsInfoForm />\r\n        </>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Header, Segment, Divider, Tab } from \"semantic-ui-react\";\r\nimport SettingsInfo from \"./SettingsInfo\";\r\n\r\nexport default observer(function Settings(){\r\n    \r\n    const panes = [\r\n        {menuItem: 'Informacje', render: ()=> <SettingsInfo />}\r\n    ]\r\n    \r\n    return(\r\n        <Segment \r\n            \r\n        padded\r\n        style={{margin: 'auto', textAlign: 'center', maxWidth: 800, marginTop: 50, minHeight: '80%'}}\r\n        >\r\n            <Header content='Ustawienia' />\r\n            <Divider />\r\n            <Tab panes={panes} />\r\n        </Segment>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { useState } from \"react\";\r\nimport { Accordion, Button, Confirm, Label } from \"semantic-ui-react\";\r\nimport { UserSettings } from \"../../../../app/models/user\";\r\nimport { useStore } from \"../../../../app/stores/store\";\r\n\r\ninterface Props{\r\n    user: UserSettings;\r\n}\r\n\r\nexport default observer(function UserSettingsAccordionElement({user}:Props){\r\n\r\n  const [showConfirm,setShowConfirm] = useState(false);\r\n  const [active, setActive] = useState(false);\r\n  const {userStore} = useStore();\r\n\r\n    return(\r\n    <>\r\n        <Accordion.Title\r\n          active={active}\r\n          index={1}\r\n          onClick={() => setActive(!active)}\r\n          \r\n        >\r\n          Login:<Label>{user.userName} </Label>\r\n          <br />\r\n          <br />\r\n          Nazwa Użytkownika:<Label>{user.displayName}</Label>\r\n        </Accordion.Title>\r\n        <Accordion.Content active={active} index={1}>\r\n          <Button \r\n          color='red'\r\n          onClick={() => setShowConfirm(true)}>Usuń użytkownika</Button>\r\n          <Confirm \r\n          open={showConfirm}\r\n          content='Czy chcesz usunąć?'\r\n          onCancel={() => setShowConfirm(false)}\r\n           onConfirm={() => {\r\n               userStore.deleteUser(user.userName).then(()=> setShowConfirm(false))\r\n           }\r\n           }\r\n          />\r\n        </Accordion.Content>\r\n      </>\r\n      )\r\n})","import React from 'react';\r\nimport { Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button, Header } from \"semantic-ui-react\";\r\nimport FTextInput from '../../../../app/common/form/FTextInput';\r\nimport { useStore } from '../../../../app/stores/store';\r\nimport { NewUser } from '../../../../app/models/user';\r\nimport * as Yup from 'yup';\r\n\r\ninterface Props{\r\n    setOpen: (isOpen: boolean) => void;\r\n}\r\n\r\nexport default observer(function NewUserForm({setOpen}:Props){\r\n\r\n    const {userStore} = useStore();\r\n\r\n    const newUser: NewUser = {\r\n        displayName: '',\r\n        password: '',\r\n        userName: '',\r\n    } \r\n\r\n    const validationSchema = Yup.object({\r\n        userName: Yup.string().required('Należy podać nazwę użytkownika'),\r\n        password: Yup.string().required('Należy podać hasło').matches(\r\n            /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,})/,\r\n            \"Musi zawierać 8 znaków, Jedną dużą literę, Jedną małą literę, Jedną cyfre i Jeden znak specjalny\"\r\n          ),\r\n        displayName: Yup.string().required('Nazwa użytkownika jest wymagana')\r\n    })\r\n\r\n    return(\r\n        <Formik\r\n            initialValues={newUser}\r\n            onSubmit={(values, { setErrors }) => {\r\n                userStore.createUser(values).then(()=> setOpen(false))\r\n            }\r\n            }\r\n            validationSchema={validationSchema}\r\n        >\r\n            {({ handleSubmit, isSubmitting, errors }) => (\r\n                <Form className='ui form'\r\n                    onSubmit={handleSubmit}\r\n                    autoComplete='off'\r\n                    style={{ padding: '2rem',marginBottom: '2rem' }}\r\n                >\r\n                    <Header as='h2' textAlign='center'>\r\n                    Dodaj użytkownika\r\n                        </Header>\r\n                    <FTextInput name='userName' placeholder='Login użytkownika' />\r\n                    <FTextInput name='displayName' placeholder='Nazwa użytkownika' />\r\n                    <FTextInput type='password' name='password' placeholder='Hasło' />\r\n                   \r\n                    <Button type='submit' icon='check' loading={isSubmitting} floated='right' color='green' />\r\n                </Form>\r\n            )}\r\n\r\n        </Formik >\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { useState } from \"react\";\r\nimport { Modal } from \"semantic-ui-react\";\r\nimport NewUserForm from \"./NewUserForm\";\r\n\r\ninterface Props {\r\n    component: React.FunctionComponent | React.ReactElement;\r\n}\r\n\r\nexport default observer(function UserSettingsnModal({ component }: Props) {\r\n    \r\n    const [isOpen, setOpen] = useState(false);\r\n\r\n    return (\r\n        <Modal\r\n            closeIcon\r\n            size='tiny'\r\n            onClose={() => setOpen(false)}\r\n            onOpen={() => setOpen(true)}\r\n            open={isOpen}\r\n            trigger={component}\r\n        >\r\n            <NewUserForm setOpen={setOpen} />\r\n        </Modal>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Accordion, Button, Container, Divider, Header, Segment } from \"semantic-ui-react\";\r\nimport { UserSettings } from \"../../../../app/models/user\";\r\nimport { useStore } from \"../../../../app/stores/store\";\r\nimport UserSettingsAccordionElement from \"./UserSettingsAccordionElement\";\r\nimport UserSettingsModal from \"./UserSettingsModal\";\r\n\r\nexport default observer(function UserSettings(){\r\n\r\n    const {userStore} = useStore();\r\n\r\n    const [users, setUsers] = useState<UserSettings[]>();\r\n\r\n    useEffect(()=>{\r\n\r\n        async function loadUsers() {\r\n            let dtoUsers  = await userStore.loadUsers();\r\n            setUsers(dtoUsers);\r\n        } \r\n\r\n        loadUsers();\r\n\r\n    },[userStore])\r\n\r\n    return(\r\n    <>\r\n    <Segment>\r\n      <Container textAlign=\"center\">\r\n        <Header as=\"h1\" size=\"large\" content=\"Użytkownicy\" color=\"teal\" />\r\n      </Container>\r\n      <Divider />\r\n      <UserSettingsModal\r\n      component={<Button content='Nowy użytkownik' />}\r\n      />\r\n      <Container textAlign=\"center\">\r\n            <Accordion styled exclusive={false} fluid>\r\n             {users && users.map(user => (\r\n                 <UserSettingsAccordionElement key={user.id} user={user} />\r\n             ))}\r\n            </Accordion>\r\n      </Container>\r\n\r\n        \r\n\r\n    </Segment>\r\n    </>\r\n    )\r\n})","import { Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button, DropdownItemProps, Form, Header } from \"semantic-ui-react\";\r\nimport FTextInput from \"../../../app/common/form/FTextInput\";\r\nimport { StatusGroup } from \"../../../app/models/statusGroup\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\n\r\ninterface Props{\r\n    setOpen: (isOpen: boolean) => void;\r\n}\r\n\r\nexport default observer(function StatusGroupCreateForm({setOpen}:Props){\r\n    \r\n    const {ordersStore} = useStore();\r\n\r\n    const groupsOptions: DropdownItemProps[] = [];\r\n    ordersStore.statusGroups?.forEach(x=> groupsOptions.push({\r\n        key: x.id,\r\n        value: x.id,\r\n        text: x.name\r\n    }))\r\n\r\n    const statusGroup: StatusGroup = {\r\n        id: 0,\r\n        name: '',\r\n        index: 0,\r\n        statuses: []\r\n    }\r\n\r\n\r\n    return(\r\n        <Formik\r\n            initialValues={statusGroup}\r\n            onSubmit={(values, { setErrors }) => {\r\n                ordersStore.createGroupsStatus(values.name).then(()=> setOpen(false));\r\n            }\r\n            }\r\n        >\r\n            {({ handleSubmit, isSubmitting, errors }) => (\r\n                <Form className='ui form'\r\n                    onSubmit={handleSubmit}\r\n                    autoComplete='off'\r\n                    style={{ padding: '2rem',marginBottom: '2rem' }}\r\n                >\r\n                    <Header as='h2' textAlign='center'>\r\n                    Utwórz grupę statusów\r\n                        </Header>\r\n                    <FTextInput name='name' placeholder='Nazwa grupy' />\r\n                    <Button type='submit' icon='check' loading={isSubmitting} floated='right' color='green' />\r\n                </Form>\r\n            )}\r\n\r\n        </Formik >\r\n    )\r\n})","import { Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React, { useState } from \"react\";\r\nimport { Button, Confirm, Form, Header} from \"semantic-ui-react\";\r\nimport FTextInput from \"../../../app/common/form/FTextInput\";\r\nimport { StatusGroup } from \"../../../app/models/statusGroup\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\n\r\ninterface Props{\r\n    statusGroup: StatusGroup;\r\n    setOpen: (isOpen: boolean) => void;\r\n}\r\n\r\nexport default observer(function StatusGroupEditForm({statusGroup, setOpen}:Props) {\r\n\r\n    const { ordersStore } = useStore();\r\n\r\n    const [openDeleteConfirm, setOpenDeleteConfirm] = useState(false);\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={statusGroup}\r\n            onSubmit={(values, { setErrors }) => {\r\n                ordersStore.editGroupStatus(values).then(() =>\r\n                    setOpen(false)\r\n                ).catch((errors) => setErrors(errors))\r\n            }\r\n            }\r\n        >\r\n            {({ handleSubmit, isSubmitting, errors }) => (\r\n                <Form className='ui form'\r\n                    onSubmit={handleSubmit}\r\n                    autoComplete='off'\r\n                    style={{ padding: '2rem', marginBottom: '2rem' }}\r\n                >\r\n                    <Header as='h2' textAlign='center'>\r\n                    Edytuj grupę \r\n                        </Header>\r\n                    <FTextInput name='name' placeholder='Nazwa grupy' />\r\n                    <Button type='submit' icon='check' loading={isSubmitting} floated='right' color='green' />\r\n                    <Button onClick={()=>setOpenDeleteConfirm(true)} type='button' loading={isSubmitting} floated='left' color='red'>Usuń</Button>\r\n                    <Confirm \r\n                    open={openDeleteConfirm}\r\n                    onCancel={()=>setOpenDeleteConfirm(false)}\r\n                    onConfirm={()=>{\r\n                        ordersStore.deleteStatusGroup(statusGroup.id).then(()=>{\r\n                            setOpenDeleteConfirm(false);\r\n                            setOpen(false);\r\n                        }).catch(()=>{\r\n                            setOpenDeleteConfirm(false);\r\n                            setOpen(false);\r\n                        }); \r\n                        \r\n                    }}\r\n                    content=\"Potwierdz usunięcie\"\r\n                    cancelButton='Anuluj'\r\n\r\n                    />\r\n                </Form>\r\n            )}\r\n\r\n        </Formik >\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { useState } from \"react\";\r\nimport { Modal } from \"semantic-ui-react\";\r\nimport { StatusGroup } from \"../../../app/models/statusGroup\";\r\nimport StatusGroupCreateForm from \"./StatusGroupCreateForm\";\r\nimport StatusGroupEditForm from \"./StatusGroupEditForm\";\r\n\r\ninterface Props {\r\n    component: React.FunctionComponent | React.ReactElement;\r\n    statusGroup?: StatusGroup;\r\n    isNew?: boolean;\r\n}\r\n\r\nexport default observer(function StatusGroupModal({ component, statusGroup, isNew }: Props) {\r\n    \r\n    const [isOpen, setOpen] = useState(false);\r\n\r\n    return (\r\n        <Modal\r\n            closeIcon\r\n            size='tiny'\r\n            onClose={() => setOpen(false)}\r\n            onOpen={() => setOpen(true)}\r\n            open={isOpen}\r\n            trigger={component}\r\n        >\r\n            {isNew ? (\r\n            <StatusGroupCreateForm setOpen={setOpen} />\r\n            ) : \r\n            <StatusGroupEditForm statusGroup={statusGroup!} setOpen={setOpen} />\r\n            } \r\n            \r\n        </Modal>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport { useState } from \"react\";\r\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\r\nimport { Accordion, Button, Divider, Header, Label } from \"semantic-ui-react\";\r\nimport { StatusGroup } from \"../../../app/models/statusGroup\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport StatusGroupModal from \"./StatusGroupModal\";\r\nimport StatusModal from \"./StatusModal\";\r\n\r\ninterface Props {\r\n  group: StatusGroup;\r\n}\r\n\r\nexport default observer(function StatusesAccordionElement({ group }: Props) {\r\n  const [active, setActive] = useState(false);\r\n  const { ordersStore } = useStore();\r\n\r\n  var sortedStatusesByIndex = [...group.statuses!].sort((a, b) =>\r\n    a.index > b.index ? 1 : -1\r\n  );\r\n\r\n  function onDragEnd(value: any) {\r\n    //\r\n    if (value.source !== null && value.destination !== null) {\r\n      ordersStore.updateStatusOrder(\r\n        group.id,\r\n        value.source.index,\r\n        value.destination.index\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Accordion.Title\r\n        active={active}\r\n        index={group.index}\r\n        onClick={() => setActive(!active)}\r\n      >\r\n        {group.name}\r\n        <StatusGroupModal \r\n        statusGroup={group}\r\n        component={<Button icon='edit outline' floated='right' style={{background: 'rgba(0, 0, 0, 0.0)'}} />}\r\n        />\r\n      </Accordion.Title>\r\n      <DragDropContext onDragEnd={(value) => onDragEnd(value)}>\r\n        <Droppable droppableId={group.index.toString()}>\r\n          {({ droppableProps, placeholder, innerRef }) => (\r\n            <Accordion.Content active={active} index={group.index}>\r\n              <ul\r\n                style={{ listStyleType: \"none\" }}\r\n                {...droppableProps}\r\n                ref={innerRef}\r\n              >\r\n                {sortedStatusesByIndex!.map((status) => (\r\n                  <Draggable\r\n                    key={status.id}\r\n                    draggableId={status.id.toString()}\r\n                    index={status.index}\r\n                  >\r\n                    {({ draggableProps, dragHandleProps, innerRef }) => (\r\n                      <li\r\n                        key={status.id}\r\n                        {...draggableProps}\r\n                        {...dragHandleProps}\r\n                        ref={innerRef}\r\n                      >\r\n                        <Divider />\r\n                        {status.index}\r\n\r\n                        <Header as=\"h4\" floated=\"left\">\r\n                          {status.name}\r\n                          <Label style={{ background: status.color }} />\r\n                        </Header>\r\n                        <Button\r\n                          content=\"Usuń\"\r\n                          color=\"red\"\r\n                          size=\"tiny\"\r\n                          floated=\"right\"\r\n                          onClick={()=> ordersStore.deleteStatus(status.id)}\r\n                        />\r\n                        <StatusModal\r\n                          status={status}\r\n                          component={\r\n                            <Button\r\n                              content=\"Edytuj\"\r\n                              color=\"yellow\"\r\n                              size=\"tiny\"\r\n                              floated=\"right\"\r\n                            />\r\n                          }\r\n                        />\r\n                      </li>\r\n                    )}\r\n                  </Draggable>\r\n                ))}\r\n                {placeholder}\r\n              </ul>\r\n            </Accordion.Content>\r\n          )}\r\n        </Droppable>\r\n      </DragDropContext>\r\n    </>\r\n  );\r\n});\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect } from \"react\";\r\nimport {\r\n  Accordion,\r\n  Button,\r\n  Container,\r\n  Divider,\r\n  Header,\r\n  Segment,\r\n} from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport StatusesAccordionElement from \"./StatusesAccordionElement\";\r\nimport StatusGroupModal from \"./StatusGroupModal\";\r\nimport StatusModal from \"./StatusModal\";\r\n\r\nexport default observer(function Statuses() {\r\n  const { ordersStore } = useStore();\r\n  const { statusGroups } = ordersStore;\r\n\r\n  useEffect(() => {\r\n    if (!statusGroups) ordersStore.loadStatuses();\r\n  }, [statusGroups, ordersStore]);\r\n\r\n  var sortedGroupsByIndex = undefined;\r\n\r\n  if (statusGroups) {\r\n    sortedGroupsByIndex = [...statusGroups!];\r\n    sortedGroupsByIndex.sort((a, b) => (a.index > b.index ? 1 : -1));\r\n  }\r\n\r\n  \r\n\r\n  return (\r\n    <Segment>\r\n      <Container textAlign=\"center\">\r\n        <Header as=\"h1\" size=\"large\" content=\"Statusy\" color=\"teal\" />\r\n      </Container>\r\n      <Divider />\r\n      <StatusModal\r\n      isNew\r\n      component={<Button  content='Dodaj nowy status' floated='left' />}\r\n      />\r\n      <StatusGroupModal\r\n      isNew\r\n      component={<Button content='Dodaj nową grupę statusów' floated='right' />}\r\n      />\r\n      \r\n      <Container textAlign=\"center\">\r\n            <Accordion styled exclusive={false} fluid>\r\n              {sortedGroupsByIndex?.map((group) => (\r\n                <StatusesAccordionElement group={group} key={group.id} />\r\n              ))}\r\n            </Accordion>\r\n      </Container>\r\n    </Segment>\r\n  );\r\n});\r\n","import React from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Grid, Header, Icon, Image } from \"semantic-ui-react\";\r\n\r\nexport default observer(function HomePage() {\r\n    return (\r\n        <>\r\n            <Grid padded>\r\n                <Grid.Row columns={2}>\r\n                    <Grid.Column  >\r\n                        <Header size='huge' style={{ marginTop: '40%' }}>\r\n                            Totam numquam reprehenderit doloremque.\r\n                        </Header>\r\n                    </Grid.Column>\r\n                    <Grid.Column>\r\n                        <Image src='logo-tangler.png' size='large' />\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n                <Grid.Row style={{ padding: 30 }} columns={1}>\r\n                    <Grid.Column>\r\n                        Minima tempore quia accusamus recusandae.\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n                <Grid.Row style={{ paddingTop: 50 }} columns={1}>\r\n                    <Grid.Column style={{ textAlign: 'center' }} >\r\n                        <Header size='huge'>Nostrum, repudiandae. <Icon name='exchange' /> Architecto, earum praesentium.</Header>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n                <Grid.Row style={{ paddingTop: 30 }} columns={3} divided>\r\n                    <Grid.Column>\r\n                        <h4>Lorem ipsum, dolor sit amet consectetur adipisicing elit.</h4>\r\n                        <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Nostrum, repudiandae. Veritatis aperiam, pariatur, vitae facere quas rem, porro aspernatur provident harum repellendus at eveniet aliquid molestias voluptatum. Architecto, earum praesentium.</p>\r\n                    </Grid.Column>\r\n                    <Grid.Column>\r\n                        <h4>Lorem ipsum dolor sit amet consectetur adipisicing elit.</h4>\r\n                        <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Facere quis maxime harum illum id nobis deserunt beatae cum nemo unde eos, exercitationem, modi sint delectus aliquid minus, voluptate nisi distinctio?</p>\r\n                    </Grid.Column>\r\n                    <Grid.Column>\r\n                        <h4>Lorem ipsum dolor sit amet consectetur, adipisicing elit.</h4>\r\n                        <p>Lorem ipsum, dolor sit amet consectetur adipisicing elit. Rerum quibusdam perferendis nisi facilis, qui sequi quas temporibus fuga, earum in architecto tempore numquam labore minus, vitae laboriosam. Sed, voluptates eos!</p>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n            </Grid>\r\n        </>\r\n    )\r\n})\r\n","export const Colors = {\r\n    purple: \"#845EC2\",\r\n    purplePink: \"#D65DB1\",\r\n    pinkRed: \"#FF6F91\",\r\n    orange: \"#FF9671\",\r\n    brightOrange: \"#FFC75F\",\r\n    yellow: \"#3F9F871\"\r\n}","import React from \"react\";\r\nimport { ErrorMessage, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button, Form, Grid, Header, Label, Segment } from \"semantic-ui-react\";\r\nimport FTextInput from \"../../app/common/form/FTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\nimport { Colors } from \"../../app/common/Colors\";\r\n\r\nexport default observer(function UserLogin() {\r\n\r\n    const { userStore } = useStore();\r\n    const validationSchema = Yup.object({\r\n        username: Yup.string().required('Należy podać nazwę użytkownika'),\r\n        password: Yup.string().required('Należy podać hasło')\r\n    })\r\n\r\n    return (\r\n        <Grid textAlign='center' style={{ marginTop: '50%' }}>\r\n            <Segment className='login-segment' compact raised>\r\n                <Formik\r\n\r\n                    initialValues={{ username: '', password: '', error: null }}\r\n                    onSubmit={(values, { setErrors }) => userStore.login(values).catch(error => {\r\n                        setErrors({ error: 'Nie poprawna nazwa użytknownika lub hasło' })\r\n                    })}\r\n                    validationSchema={validationSchema}\r\n                >\r\n                    {({ handleSubmit, isSubmitting, errors }) => (\r\n                        <Form className='ui form login-segment' onSubmit={handleSubmit} autoComplete='off' style={{ padding: 30 }}>\r\n\r\n                            <Header as='h2' content='Zaloguj się do panelu' textAlign='center' />\r\n                            <FTextInput name='username' placeholder='Nazwa użytkownika' />\r\n                            <FTextInput name='password' placeholder='Hasło' type='password' />\r\n                            <ErrorMessage name='error' render={() => <Label style={{ marginBottom: 10 }} basic color='red' content={errors.error} />} />\r\n                            <Button loading={isSubmitting} fluid content='Zaloguj' type='submit' style={{background: Colors.brightOrange}} />\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            </Segment>\r\n        </Grid>\r\n    )\r\n})","import React from \"react\";\r\nimport { ErrorMessage, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button, Form, Grid, Header, Label, Segment } from \"semantic-ui-react\";\r\nimport FTextInput from \"../../app/common/form/FTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\nimport { Colors } from \"../../app/common/Colors\";\r\n\r\nexport default observer(function UserRegistration() {\r\n\r\n    const { userStore } = useStore();\r\n    const digitsOnly = (value:any) => /^\\d+$/.test(value)\r\n\r\n    const validationSchema = Yup.object({\r\n        username: Yup.string().required('Należy podać nazwę użytkownika'),\r\n        password: Yup.string().required('Należy podać hasło').matches(\r\n            /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,})/,\r\n            \"Musi zawierać 8 znaków, Jedną dużą literę, Jedną małą literę, Jedną cyfre i Jeden znak specjalny\"\r\n          ),\r\n        name: Yup.string().required('Nazwa firmy jest wymagana'),\r\n        nip: Yup.string().required('Numer NIP jest wymagany').test('Tylko liczby','Pole powinno zawierać tylko liczby', digitsOnly),\r\n        email: Yup.string().email('Nie poprawny format').required('Email jest wymagany'),\r\n        displayName: Yup.string().required('Nazwa użytkownika jest wymagana')\r\n    })\r\n\r\n    return (\r\n        <Grid textAlign='center' style={{ marginTop: '50%' }}>\r\n            <Segment className='login-segment' compact raised>\r\n                <Formik\r\n\r\n                    initialValues={{ username: '', password: '', email: '', nip: '',displayName: '', name: '', error: null }}\r\n                    onSubmit={(values, { setErrors }) => userStore.login(values).catch(error => {\r\n                        setErrors({ error: 'Nie poprawna nazwa użytknownika lub hasło' })\r\n                    })}\r\n                    validationSchema={validationSchema}\r\n                >\r\n                    {({ handleSubmit, isSubmitting, errors }) => (\r\n                        <Form className='ui form login-segment' onSubmit={handleSubmit} autoComplete='off' style={{ padding: 30 }}>\r\n\r\n                            <Header as='h2' content='Zarejestruj się' textAlign='center' />\r\n                            <Grid columns={2}>\r\n                                <Grid.Row>\r\n                                <FTextInput label=\"Nazwa Firmy\" name='name' placeholder='Nazwa' />\r\n                                <FTextInput label=\"NIP\" name='nip' placeholder='Numer NIP' />\r\n                                </Grid.Row>\r\n                            </Grid>\r\n                            <Grid columns={2}>\r\n                                <Grid.Row>\r\n                                <FTextInput label=\"Nazwa Wyświetlana\" name='displayName' placeholder='Nazwa' />\r\n                                <FTextInput label=\"Email\" name='email' placeholder='adres email' />\r\n                                </Grid.Row>\r\n                            </Grid>\r\n                            <FTextInput label=\"Login\" name='username' placeholder='Login' />\r\n                            <FTextInput label=\"Hasło\" name='password' placeholder='Hasło' type='password' />\r\n                            <ErrorMessage name='error' render={() => <Label style={{ marginBottom: 10 }} basic color='red' content={errors.error} />} />\r\n                            <Button loading={isSubmitting} fluid content='Zarejestruj' type='submit' style={{background: Colors.orange}} />\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            </Segment>\r\n        </Grid>\r\n    )\r\n})","import React from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Dropdown, Menu } from \"semantic-ui-react\";\r\nimport { useStore } from \"../stores/store\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nexport default observer(function DashboardNavbar() {\r\n    const { userStore,ordersStore } = useStore();\r\n\r\n    return (\r\n        <Menu className='dashboard__navbar' fixed='top' inverted size='large' style={{ borderRadius: '0px', margin: 0}}>\r\n            <Menu.Item position='right'>\r\n                <Menu.Header>\r\n                    <Dropdown text={userStore.user?.displayName}>\r\n                        <Dropdown.Menu direction='left'>\r\n                            <Dropdown.Item \r\n                            text='Użytkownicy'\r\n                            as={NavLink} \r\n                            to='/dashboard/ustawienia/uzytkownicy'\r\n                            />\r\n                            <Dropdown.Item text='Wyloguj' onClick={() => {\r\n                                userStore.logout()\r\n                                ordersStore.reset();\r\n                            }} />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Header>\r\n            </Menu.Item>\r\n        </Menu>\r\n    )\r\n})","import React from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { Icon, Menu } from \"semantic-ui-react\";\r\n\r\nexport default observer(function DashboardSidebar() {\r\n\r\n\r\n    return (\r\n        <div className='container__sidebar'>\r\n            <Menu className='sidebar__stick' inverted vertical size='large' style={{ borderRadius: '0px', height: '100%' }}>\r\n                <Menu.Item>\r\n                    <Menu.Header style={{ fontSize: 30 }}>Tangler</Menu.Header>\r\n                </Menu.Item>\r\n                <Menu.Item>\r\n                    <Menu.Header><Icon name='shopping cart' />Zamówienia</Menu.Header>\r\n                    <Menu.Menu>\r\n                        <Menu.Item as={NavLink} to='/dashboard/zamowienia' name='zamowienia'>Lista zamówień</Menu.Item>\r\n                    </Menu.Menu>\r\n                    <Menu.Menu>\r\n                        <Menu.Item as={NavLink} to='/dashboard/dokumenty' name='dokumenty'>Dokumenty</Menu.Item>\r\n                    </Menu.Menu>\r\n                    <Menu.Menu>\r\n                        <Menu.Item as={NavLink} to='/dashboard/statusy' name='statusy-zamowien'>Statusy Zamówień</Menu.Item>\r\n                    </Menu.Menu>\r\n                    <Menu.Menu>\r\n                        <Menu.Item as={NavLink} to='/dashboard/integracje' name='ustawienia'>Integracje</Menu.Item>\r\n                    </Menu.Menu>\r\n                    <Menu.Menu>\r\n                        <Menu.Item as={NavLink} to='/dashboard/ustawienia' name='ustawienia'>Ustawienia</Menu.Item>\r\n                    </Menu.Menu>\r\n                </Menu.Item>\r\n                {/* <Menu.Item>\r\n                    <Menu.Header><Icon name='clone' />Produkty</Menu.Header>\r\n                </Menu.Item> */}\r\n            </Menu>\r\n        </div>\r\n    )\r\n})","import React from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { Container, Dropdown, Icon, Menu } from \"semantic-ui-react\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\n\r\nexport default observer(function HomeNavBar() {\r\n\r\n    const { userStore } = useStore();\r\n\r\n    return (\r\n        <>\r\n            <Menu inverted fixed='top' className='HomeNavBar' >\r\n                <Container>\r\n                    <Menu.Item header as={NavLink} to='/' content='Tangler' className='navbar-header' />\r\n                    <Dropdown text='Funkcje' simple item>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={NavLink} to='/funkcje/manager-zamowien' >Manager Zamówień</Dropdown.Item>\r\n                            <Dropdown.Item as={NavLink} to='/funkcje/manager-produktow' >Manager Produtków</Dropdown.Item>\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                    <Menu.Item as={NavLink} to='/intergracje' >Integracje</Menu.Item>\r\n                    <Menu.Item as={NavLink} to='/kontakt' >Kontakt</Menu.Item>\r\n                    <Menu.Item as={NavLink} to='/pomoc' >Pomoc</Menu.Item>\r\n                    {userStore.user ? (\r\n                        <Menu.Item position='right' as={NavLink} to='/dashboard' ><Icon name='user' /> Przejdź do panelu - {userStore.user.displayName}</Menu.Item>\r\n                    )\r\n                        :\r\n                        (\r\n                            <>\r\n                            <Menu.Item position='right' as={NavLink} to='/rejestracja' >Zarejestruj się</Menu.Item>\r\n                            <Menu.Item as={NavLink} to='/logowanie' >Zaloguj się</Menu.Item>\r\n                            </>\r\n                        )}\r\n                </Container>\r\n            </Menu>\r\n        </>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Dimmer, Loader } from \"semantic-ui-react\";\r\n\r\nexport default observer(function LoaderComponent() {\r\n    return (\r\n        <Dimmer active>\r\n            <Loader inverted>Ładowanie...</Loader>\r\n        </Dimmer>\r\n    )\r\n})","import React from \"react\";\r\nimport { Route, Redirect, RouteComponentProps, RouteProps } from \"react-router-dom\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({ component: Component, ...rest }: Props) {\r\n    const { userStore: { isLoggedIn } } = useStore();\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\r\n        />\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport { Container, Segment } from 'semantic-ui-react';\r\nimport Documents from '../../features/dashboard/documents/Documents';\r\nimport HomeDashboardPage from '../../features/dashboard/HomeDashboardPage';\r\nimport Integrations from '../../features/dashboard/integrations/Integrations';\r\nimport OrderDetails from '../../features/dashboard/orderDetails/OrderDetails';\r\nimport Orders from '../../features/dashboard/orders/Orders';\r\nimport Settings from '../../features/dashboard/settings/Settings';\r\nimport UserSettings from '../../features/dashboard/settings/usersSettings/UserSettings';\r\nimport Statuses from '../../features/dashboard/statuses/Statuses';\r\nimport HomePage from '../../features/home/HomePage';\r\nimport UserLogin from '../../features/user/UserLogin';\r\nimport UserRegistration from '../../features/user/UserRegistration';\r\nimport { useStore } from '../stores/store';\r\nimport DashboardNavbar from './DashboardNavbar';\r\nimport DashboardSidebar from './DashboardSidebar';\r\nimport HomeNavBar from './HomeNavBar';\r\nimport LoaderComponent from './LoaderComponent';\r\nimport PrivateRoute from './PrivateRoute';\r\n\r\nfunction App() {\r\n\r\n  const { commonStore, userStore } = useStore()\r\n  useEffect(() => {\r\n    if (commonStore.token) {\r\n      userStore.getCurrentUser().finally(() => commonStore.setAppLoaded());\r\n    }\r\n    else {\r\n      commonStore.setAppLoaded();\r\n    }\r\n  }, [commonStore, userStore])\r\n\r\n  if (!commonStore.appLoaded) return <LoaderComponent />\r\n\r\n  return (\r\n    <>\r\n      <ToastContainer position='bottom-right' hideProgressBar />\r\n      <Route\r\n        exact path={['/','/rejestracja', '/logowanie', '/kontakt', '/funkcje', '/pomoc', '/funkcje/manager-zamowien', '/funkcje/manager-produktow', '/intergracje']}\r\n        render={() => (\r\n          <>\r\n            <HomeNavBar />\r\n            <Container style={{ marginTop: '7em' }} >\r\n              <Route exact path='/' component={HomePage} />\r\n              <Route exact path='/logowanie' component={UserLogin} />\r\n              <Route exact path='/rejestracja' component={UserRegistration} />\r\n            </Container>\r\n          </>\r\n        )}\r\n      />\r\n      <Route\r\n        path={['/dashboard/(.+)', '/dashboard']}\r\n        render={() => (\r\n          <>\r\n            <DashboardNavbar />\r\n            <div className='container__dashboard' style={{ marginTop: 43 }}>\r\n              <DashboardSidebar />\r\n              <Segment className='container__main' style={{ margin: 0, padding: 0 }} >\r\n                <PrivateRoute exact path='/dashboard' component={HomeDashboardPage} />\r\n                <PrivateRoute exact path='/dashboard/zamowienia' component={Orders} />\r\n                <PrivateRoute exact path='/dashboard/zamowienia/:id' component={OrderDetails} />\r\n                <PrivateRoute exact path='/dashboard/statusy' component={Statuses} />\r\n                <PrivateRoute exact path='/dashboard/integracje' component={Integrations} />\r\n                <PrivateRoute exact path='/dashboard/ustawienia/uzytkownicy' component={UserSettings} />\r\n                <PrivateRoute exact path='/dashboard/dokumenty' component={Documents} />\r\n                <PrivateRoute exact path='/dashboard/ustawienia' component={Settings} />\r\n              </Segment>\r\n            </div>\r\n\r\n          </>\r\n        )\r\n        }\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default observer(App);\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport './app/layout/style.css';\r\nimport App from './app/layout/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { Router } from 'react-router';\r\nimport { createBrowserHistory } from 'history';\r\nimport { store, StoreContext } from './app/stores/store';\r\n\r\nexport const history = createBrowserHistory();\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <StoreContext.Provider value={store}>\r\n      <Router history={history}>\r\n        <App />\r\n      </Router>\r\n    </StoreContext.Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}